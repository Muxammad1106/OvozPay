"""
AI Service Manager - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏
–ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É WhisperService, EasyOCRService, NLPService –∏ CurrencyService
"""

import asyncio
import logging
from typing import Optional, Dict, Any, List
from datetime import datetime

from .ai.voice_recognition.whisper_service import whisper_service
from .ai.ocr.easyocr_service import easyocr_service
from .ai.text_processing.nlp_service import nlp_service
from .currency_service import currency_service

logger = logging.getLogger(__name__)


class AIServiceManager:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.whisper = whisper_service
        self.ocr = easyocr_service
        self.nlp = nlp_service
        self.currency = currency_service
        
        self.is_initialized = False
        self._initialization_lock = asyncio.Lock()
    
    async def initialize_services(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã
        
        Returns:
            True –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
        """
        async with self._initialization_lock:
            if self.is_initialized:
                return True
            
            try:
                logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
                
                initialization_results = []
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
                services_status = await self.get_all_services_status()
                
                for service_name, status in services_status.items():
                    if status.get('status') == 'active':
                        logger.info(f"‚úÖ {service_name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                        initialization_results.append(True)
                    elif status.get('status') == 'error':
                        logger.warning(f"‚ö†Ô∏è {service_name} –∏–º–µ–µ—Ç –æ—à–∏–±–∫–∏: {status.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                        initialization_results.append(False)
                    else:
                        logger.warning(f"‚ùì {service_name} –≤ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
                        initialization_results.append(False)
                
                # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏ –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã 75% —Å–µ—Ä–≤–∏—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç
                success_rate = sum(initialization_results) / len(initialization_results)
                
                if success_rate >= 0.75:
                    self.is_initialized = True
                    logger.info(f"üöÄ AI —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã! –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
                    return True
                else:
                    logger.error(f"‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}")
                    return False
                    
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
                return False
    
    async def process_voice_message(
        self,
        audio_file_path: str,
        user_id: str,
        language: str = 'ru'
    ) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            audio_file_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language: –Ø–∑—ã–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # 1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Whisper
            transcription_result = await self.whisper.transcribe_audio(
                audio_file_path, language, user_id
            )
            
            if not transcription_result or not transcription_result.get('text'):
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                return {
                    'status': 'failed',
                    'error': 'speech_recognition_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
                }
            
            recognized_text = transcription_result['text']
            logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{recognized_text}'")
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ NLP
            nlp_result = await self.nlp.parse_transaction_text(recognized_text, language)
            
            if not nlp_result or nlp_result.get('confidence', 0) < 0.3:
                logger.warning("–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –ø–∞—Ä—Å–∏–Ω–≥–µ NLP")
                return {
                    'status': 'failed',
                    'error': 'nlp_parsing_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞',
                    'recognized_text': recognized_text
                }
            
            # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            final_amount = nlp_result.get('amount')
            final_currency = nlp_result.get('currency', 'UZS')
            
            # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ UZS, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UZS –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
            if final_currency != 'UZS' and final_amount:
                converted_amount = await self.currency.convert_amount(
                    final_amount, final_currency, 'UZS'
                )
                if converted_amount:
                    nlp_result['amount_uzs'] = converted_amount
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'status': 'success',
                'processing_data': {
                    'audio_duration': transcription_result.get('audio_duration', 0),
                    'speech_confidence': transcription_result.get('confidence', 0),
                    'nlp_confidence': nlp_result.get('confidence', 0),
                    'processing_time': transcription_result.get('processing_time', 0)
                },
                'transaction_data': {
                    'original_text': recognized_text,
                    'transaction_type': nlp_result.get('transaction_type'),
                    'amount': nlp_result.get('amount'),
                    'currency': nlp_result.get('currency'),
                    'amount_uzs': nlp_result.get('amount_uzs'),
                    'category': nlp_result.get('category'),
                    'description': nlp_result.get('description', recognized_text),
                    'date': nlp_result.get('date'),
                    'extracted_entities': nlp_result.get('extracted_entities', {})
                }
            }
            
            logger.info(
                f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: "
                f"{nlp_result.get('transaction_type')} {nlp_result.get('amount')} {nlp_result.get('currency')}"
            )
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return {
                'status': 'failed',
                'error': 'processing_error',
                'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
            }
    
    async def process_receipt_image(
        self,
        image_file_path: str,
        user_id: str
    ) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞
        
        Args:
            image_file_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —á–µ–∫–∞
        """
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # 1. OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ocr_result = await self.ocr.extract_text_from_image(
                image_file_path, enhance_image=True, user_id=user_id
            )
            
            if not ocr_result or not ocr_result.get('structured_data'):
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return {
                    'status': 'failed',
                    'error': 'ocr_failed',
                    'message': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏'
                }
            
            structured_data = ocr_result['structured_data']
            raw_text = ocr_result.get('raw_text', '')
            
            logger.info(f"OCR –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞: {structured_data.get('total_amount')}")
            
            # 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π NLP –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            nlp_result = None
            if raw_text and len(raw_text) > 10:
                nlp_result = await self.nlp.parse_transaction_text(raw_text, 'ru')
            
            # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
            total_amount = structured_data.get('total_amount')
            if total_amount and total_amount > 0:
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —á–µ–∫–∏ –≤ –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–µ –≤ —Å—É–º–∞—Ö
                structured_data['amount_uzs'] = total_amount
                structured_data['currency'] = 'UZS'
            
            # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                'status': 'success',
                'processing_data': {
                    'ocr_confidence': ocr_result.get('confidence', 0),
                    'processing_time': ocr_result.get('processing_time', 0),
                    'detected_regions': ocr_result.get('detected_regions', 0),
                    'nlp_confidence': nlp_result.get('confidence', 0) if nlp_result else 0
                },
                'receipt_data': {
                    'raw_text': raw_text,
                    'total_amount': structured_data.get('total_amount'),
                    'currency': structured_data.get('currency', 'UZS'),
                    'shop_name': structured_data.get('shop_name'),
                    'items': structured_data.get('items', []),
                    'dates': structured_data.get('dates', []),
                    'all_amounts': structured_data.get('amounts', [])
                },
                'transaction_suggestions': []
            }
            
            # 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            if total_amount and total_amount > 0:
                # –û—Å–Ω–æ–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                main_transaction = {
                    'transaction_type': 'expense',
                    'amount': total_amount,
                    'currency': 'UZS',
                    'category': '–ø—Ä–æ–¥—É–∫—Ç—ã',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    'description': f"–ü–æ–∫—É–ø–∫–∞ –≤ {structured_data.get('shop_name', '–º–∞–≥–∞–∑–∏–Ω–µ')}",
                    'date': structured_data.get('dates', [None])[0]
                }
                result['transaction_suggestions'].append(main_transaction)
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –Ω–∞–π–¥–µ–Ω–æ {len(result['transaction_suggestions'])} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ–∫–∞: {e}")
            return {
                'status': 'failed',
                'error': 'processing_error',
                'message': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}'
            }
    
    async def get_all_services_status(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            return {
                'whisper_service': self.whisper.get_service_status(),
                'easyocr_service': self.ocr.get_service_status(),
                'nlp_service': self.nlp.get_service_status(),
                'currency_service': self.currency.get_service_status()
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return {}
    
    async def cleanup_temp_files(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            logger.info("–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # –û—á–∏—Å—Ç–∫–∞ Whisper
            if hasattr(self.whisper, 'cleanup_temp_files'):
                self.whisper.cleanup_temp_files()
            
            # –û—á–∏—Å—Ç–∫–∞ OCR
            if hasattr(self.ocr, 'cleanup_temp_files'):
                self.ocr.cleanup_temp_files()
            
            logger.info("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")
    
    async def initialize_all_services(self) -> bool:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã
        
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ
        """
        try:
            logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            whisper_init = await self.whisper.initialize()
            ocr_init = await self.ocr.initialize()
            
            # NLP –∏ Currency —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            nlp_init = True
            currency_init = True
            
            success = whisper_init and ocr_init and nlp_init and currency_init
            
            if success:
                logger.info("–í—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                logger.warning(f"–û—à–∏–±–∫–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: Whisper={whisper_init}, OCR={ocr_init}")
            
            return success
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤: {e}")
            return False

    async def get_services_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        """
        return await self.get_all_services_status()

    async def health_check_all(self) -> Dict[str, bool]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ health check
        """
        try:
            logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º health check –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤...")
            
            # Health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            whisper_health = await self.whisper.health_check()
            ocr_health = await self.ocr.health_check()
            
            # NLP –∏ Currency –Ω–µ –∏–º–µ—é—Ç health_check
            nlp_health = True
            currency_health = True
            
            health_results = {
                'whisper': whisper_health,
                'ocr': ocr_health,
                'nlp': nlp_health,
                'currency': currency_health,
                'overall': whisper_health and ocr_health and nlp_health and currency_health
            }
            
            logger.info(f"Health check –∑–∞–≤–µ—Ä—à—ë–Ω: {health_results}")
            return health_results
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ health check: {e}")
            return {
                'whisper': False,
                'ocr': False,
                'nlp': False,
                'currency': False,
                'overall': False
            }

    def get_manager_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return {
            'manager': 'AIServiceManager',
            'status': 'active' if self.is_initialized else 'not_initialized',
            'initialized': self.is_initialized,
            'services_count': 4,
            'last_check': datetime.now().isoformat()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
ai_manager = AIServiceManager()


# –§—É–Ω–∫—Ü–∏–∏-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def process_voice_command(
    audio_file_path: str,
    user_id: str,
    language: str = 'ru'
) -> Optional[Dict[str, Any]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É"""
    return await ai_manager.process_voice_message(audio_file_path, user_id, language)


async def process_receipt_photo(
    image_file_path: str,
    user_id: str
) -> Optional[Dict[str, Any]]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    return await ai_manager.process_receipt_image(image_file_path, user_id)


async def initialize_ai_services() -> bool:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã"""
    return await ai_manager.initialize_services()


async def get_ai_services_health() -> Dict[str, Any]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    services_status = await ai_manager.get_all_services_status()
    manager_status = ai_manager.get_manager_status()
    
    return {
        'manager': manager_status,
        'services': services_status
    } 