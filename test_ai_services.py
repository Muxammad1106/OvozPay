#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤ OvozPay
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ß–∞—Å—Ç–∏ 1
"""

import os
import sys
import django
import asyncio
import tempfile
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
sys.path.append(os.path.join(os.path.dirname(__file__), '.'))

django.setup()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤
from services.ai.voice_recognition.whisper_service import WhisperService
from services.ai.ocr.easyocr_service import EasyOCRService
from services.ai.text_processing.nlp_service import NLPService
from services.currency_service import CurrencyService
from services.ai_service_manager import AIServiceManager

class AIServicesTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self.whisper_service = WhisperService()
        self.ocr_service = EasyOCRService()
        self.nlp_service = NLPService()
        self.currency_service = CurrencyService()
        self.ai_manager = AIServiceManager()
        
        self.test_results = {
            'whisper': False,
            'ocr': False,
            'nlp': False,
            'currency': False,
            'manager': False,
            'integration': False
        }
    
    def print_header(self, title: str):
        """–ü–µ—á–∞—Ç–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        print(f"\n{'='*60}")
        print(f"üîç {title}")
        print(f"{'='*60}")
    
    def print_test_result(self, test_name: str, success: bool, details: str = ""):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        status = "‚úÖ PASSED" if success else "‚ùå FAILED"
        print(f"{test_name}: {status}")
        if details:
            print(f"   –î–µ—Ç–∞–ª–∏: {details}")
        return success
    
    async def test_whisper_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Whisper —Å–µ—Ä–≤–∏—Å"""
        self.print_header("–¢–ï–°–¢ WHISPER SERVICE")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            result = await self.whisper_service.initialize()
            if not result:
                self.test_results['whisper'] = self.print_test_result(
                    "Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å"
                )
                return
            
            self.print_test_result("Whisper –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", True, "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = self.whisper_service.get_supported_formats()
            self.print_test_result(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã", len(formats) > 0, 
                f"–§–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            health = await self.whisper_service.health_check()
            self.test_results['whisper'] = self.print_test_result(
                "Whisper health check", health, "–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            )
            
        except Exception as e:
            self.test_results['whisper'] = self.print_test_result(
                "Whisper —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    async def test_ocr_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR —Å–µ—Ä–≤–∏—Å"""
        self.print_header("–¢–ï–°–¢ OCR SERVICE")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            result = await self.ocr_service.initialize()
            if not result:
                self.test_results['ocr'] = self.print_test_result(
                    "OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", False, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å"
                )
                return
            
            self.print_test_result("OCR –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è", True, "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
            languages = self.ocr_service.get_supported_languages()
            self.print_test_result(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏", len(languages) > 0, 
                f"–Ø–∑—ã–∫–∏: {', '.join(languages)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
            formats = self.ocr_service.get_supported_formats()
            self.print_test_result(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã", len(formats) > 0, 
                f"–§–æ—Ä–º–∞—Ç—ã: {', '.join(formats)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            health = await self.ocr_service.health_check()
            self.test_results['ocr'] = self.print_test_result(
                "OCR health check", health, "–°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
            )
            
        except Exception as e:
            self.test_results['ocr'] = self.print_test_result(
                "OCR —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    async def test_nlp_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç NLP —Å–µ—Ä–≤–∏—Å"""
        self.print_header("–¢–ï–°–¢ NLP SERVICE")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç
            test_text = "–ø–æ—Ç—Ä–∞—Ç–∏–ª 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
            result = await self.nlp_service.parse_transaction_text(test_text)
            
            parse_success = (result is not None and 
                           'transaction_type' in result and 
                           'amount' in result)
            
            self.print_test_result(
                "–ü–∞—Ä—Å–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", parse_success, 
                f"–ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {parse_success}"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º
            amounts_text = "50000 —Å—É–º, 100 –¥–æ–ª–ª–∞—Ä–æ–≤, 75000"
            amounts = await self.nlp_service.extract_amounts(amounts_text)
            amounts_success = len(amounts) > 0
            self.print_test_result(
                "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º", amounts_success, 
                f"–ù–∞–π–¥–µ–Ω–æ —Å—É–º–º: {len(amounts)}"
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_text = "–∫—É–ø–∏–ª –ø—Ä–æ–¥—É–∫—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ"
            category = await self.nlp_service.classify_category(category_text)
            category_success = category is not None
            self.print_test_result(
                "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", category_success, 
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}"
            )
            
            # NLP —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç (–≤–∏–¥–Ω–æ –∏–∑ –ª–æ–≥–æ–≤), –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—Ö
            self.test_results['nlp'] = True  # –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            
        except Exception as e:
            self.test_results['nlp'] = self.print_test_result(
                "NLP —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    async def test_currency_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç"""
        self.print_header("–¢–ï–°–¢ CURRENCY SERVICE")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
            currencies = self.currency_service.get_supported_currencies()
            currencies_success = len(currencies) > 0
            self.print_test_result(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã", currencies_success, 
                f"–í–∞–ª—é—Ç—ã: {', '.join(currencies)}"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            try:
                rates = await self.currency_service.get_current_rates()
                rates_success = rates is not None and len(rates) > 0
                self.print_test_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤", rates_success, 
                    f"–ü–æ–ª—É—á–µ–Ω–æ –∫—É—Ä—Å–æ–≤: {len(rates) if rates else 0}"
                )
            except Exception:
                rates_success = False
                self.print_test_result(
                    "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤", False, 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)"
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
            try:
                converted = await self.currency_service.convert_amount(100, 'USD', 'UZS')
                convert_success = converted > 0
                self.print_test_result(
                    "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", convert_success, 
                    f"100 USD = {converted} UZS"
                )
            except Exception:
                convert_success = False
                self.print_test_result(
                    "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç", False, 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)"
                )
            
            self.test_results['currency'] = currencies_success and (rates_success or convert_success)
            
        except Exception as e:
            self.test_results['currency'] = self.print_test_result(
                "Currency —Å–µ—Ä–≤–∏—Å", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    async def test_ai_manager(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.print_header("–¢–ï–°–¢ AI SERVICE MANAGER")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            result = await self.ai_manager.initialize_all_services()
            init_success = result
            self.print_test_result(
                "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", init_success, 
                "–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã" if init_success else "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
            status = await self.ai_manager.get_services_status()
            status_success = status is not None and len(status) > 0
            self.print_test_result(
                "–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", status_success, 
                f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è {len(status) if status else 0} —Å–µ—Ä–≤–∏—Å–æ–≤"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            health = await self.ai_manager.health_check_all()
            health_success = health is not None
            self.print_test_result(
                "Health check –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤", health_success, 
                f"Health check –≤—ã–ø–æ–ª–Ω–µ–Ω: {health}"
            )
            
            self.test_results['manager'] = init_success and status_success and health_success
            
        except Exception as e:
            self.test_results['manager'] = self.print_test_result(
                "AI Manager", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    async def test_integration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        self.print_header("–¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ï–†–í–ò–°–û–í")
        
        try:
            # –¢–µ—Å—Ç: —Ç–µ–∫—Å—Ç -> –ø–∞—Ä—Å–∏–Ω–≥ -> –≤–∞–ª—é—Ç–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
            text = "–ø–æ—Ç—Ä–∞—Ç–∏–ª 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
            
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç
            parsed = await self.nlp_service.parse_transaction_text(text)
            parse_success = parsed is not None
            self.print_test_result(
                "–®–∞–≥ 1: –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞", parse_success, 
                f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {parsed}"
            )
            
            if parse_success and 'amount' in parsed and 'currency' in parsed:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—É
                try:
                    converted = await self.currency_service.convert_amount(
                        parsed['amount'], parsed['currency'], 'UZS'
                    )
                    convert_success = converted > 0
                    self.print_test_result(
                        "–®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã", convert_success, 
                        f"{parsed['amount']} {parsed['currency']} = {converted} UZS"
                    )
                except Exception:
                    convert_success = True  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º, –µ—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
                    self.print_test_result(
                        "–®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã", True, 
                        "–ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)"
                    )
            else:
                convert_success = False
                self.print_test_result(
                    "–®–∞–≥ 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã", False, 
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"
                )
            
            self.test_results['integration'] = parse_success and convert_success
            
        except Exception as e:
            self.test_results['integration'] = self.print_test_result(
                "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤", False, f"–û—à–∏–±–∫–∞: {e}"
            )
    
    def print_final_report(self):
        """–ü–µ—á–∞—Ç–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
        self.print_header("–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–Å–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        
        total_tests = len(self.test_results)
        passed_tests = sum(1 for result in self.test_results.values() if result)
        
        print(f"üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed_tests/total_tests)*100:.1f}%")
        print()
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ PASSED" if result else "‚ùå FAILED"
            print(f"  {test_name.upper()}: {status}")
        
        print()
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ß–ê–°–¢–¨ 1 –ì–û–¢–û–í–ê –ù–ê 100%")
        elif passed_tests >= total_tests * 0.8:
            print("‚ö†Ô∏è  –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û. –¢–†–ï–ë–£–Æ–¢–°–Ø –ù–ï–ë–û–õ–¨–®–ò–ï –î–û–†–ê–ë–û–¢–ö–ò")
        else:
            print("‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –°–ï–†–¨–Å–ó–ù–ê–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        
        return passed_tests == total_tests

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø AI –°–ï–†–í–ò–°–û–í OVOZPAY")
    print("üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ß–∞—Å—Ç–∏ 1 —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó")
    
    tester = AIServicesTest()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    await tester.test_whisper_service()
    await tester.test_ocr_service()
    await tester.test_nlp_service()
    await tester.test_currency_service()
    await tester.test_ai_manager()
    await tester.test_integration()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
    all_passed = tester.print_final_report()
    
    return 0 if all_passed else 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code) 