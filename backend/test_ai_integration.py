#!/usr/bin/env python
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OvozPay
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Tesseract OCR, Whisper Voice –∏ Receipt-Voice Matching
"""

import os
import sys
import django
import tempfile
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(os.path.dirname(__file__))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.core.files.uploadedfile import SimpleUploadedFile
from apps.users.models import User
from apps.ai.services.ocr.tesseract_service import TesseractOCRService
from apps.ai.services.voice.whisper_service import WhisperVoiceService
from apps.ai.services.nlp.receipt_matcher import ReceiptVoiceMatcher


def create_test_receipt_image():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞
    width, height = 400, 600
    image = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(image)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç
    try:
        font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 16)
        title_font = ImageFont.truetype("/System/Library/Fonts/Arial.ttf", 20)
    except:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        font = ImageFont.load_default()
        title_font = ImageFont.load_default()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞–≥–∞–∑–∏–Ω–∞
    draw.text((20, 20), "–ú–ê–ö–†–û –°–£–ü–ï–†–ú–ê–†–ö–ï–¢", fill='black', font=title_font)
    draw.text((20, 50), "—É–ª. –ê–º–∏—Ä–∞ –¢–µ–º—É—Ä–∞, 123", fill='black', font=font)
    draw.text((20, 70), "–¢–∞—à–∫–µ–Ω—Ç, –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω", fill='black', font=font)
    
    # –õ–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    draw.line([(20, 100), (380, 100)], fill='black', width=2)
    
    # –¢–æ–≤–∞—Ä—ã
    y_pos = 120
    items = [
        ("–•–õ–ï–ë –ë–ï–õ–´–ô", "1", "5000", "5000"),
        ("–ú–û–õ–û–ö–û 1–õ", "2", "8000", "16000"),
        ("–Ø–ô–¶–ê 10–®–¢", "1", "12000", "12000"),
        ("–ú–ê–°–õ–û –ü–û–î–°–û–õ–ù", "1", "15000", "15000"),
        ("–°–ê–•–ê–† 1–ö–ì", "1", "10000", "10000"),
    ]
    
    draw.text((20, y_pos), "–ù–ê–ò–ú–ï–ù–û–í–ê–ù–ò–ï", fill='black', font=font)
    draw.text((220, y_pos), "–ö–û–õ", fill='black', font=font)
    draw.text((260, y_pos), "–¶–ï–ù–ê", fill='black', font=font)
    draw.text((320, y_pos), "–°–£–ú–ú–ê", fill='black', font=font)
    
    y_pos += 25
    draw.line([(20, y_pos), (380, y_pos)], fill='black', width=1)
    y_pos += 10
    
    total = 0
    for name, qty, price, amount in items:
        draw.text((20, y_pos), name, fill='black', font=font)
        draw.text((220, y_pos), qty, fill='black', font=font)
        draw.text((260, y_pos), price, fill='black', font=font)
        draw.text((320, y_pos), amount, fill='black', font=font)
        total += int(amount)
        y_pos += 20
    
    # –ò—Ç–æ–≥–æ
    y_pos += 20
    draw.line([(20, y_pos), (380, y_pos)], fill='black', width=2)
    y_pos += 15
    draw.text((200, y_pos), f"–ò–¢–û–ì–û: {total} –°–£–ú", fill='black', font=title_font)
    
    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    y_pos += 40
    draw.text((20, y_pos), "–î–∞—Ç–∞: 15.01.2024", fill='black', font=font)
    draw.text((20, y_pos + 20), "–í—Ä–µ–º—è: 14:30:25", fill='black', font=font)
    draw.text((20, y_pos + 40), "–ß–µ–∫ ‚Ññ: 123456789", fill='black', font=font)
    
    return image


def create_test_audio_file():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
    # –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix='.wav', delete=False) as f:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π WAV –∑–∞–≥–æ–ª–æ–≤–æ–∫
        f.write(b'RIFF')
        f.write((36).to_bytes(4, 'little'))  # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ - 8
        f.write(b'WAVE')
        f.write(b'fmt ')
        f.write((16).to_bytes(4, 'little'))  # –†–∞–∑–º–µ—Ä fmt —á–∞–Ω–∫–∞
        f.write((1).to_bytes(2, 'little'))   # –ê—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç (PCM)
        f.write((1).to_bytes(2, 'little'))   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        f.write((16000).to_bytes(4, 'little'))  # –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
        f.write((32000).to_bytes(4, 'little'))  # –ë–∞–π—Ç –≤ —Å–µ–∫—É–Ω–¥—É
        f.write((2).to_bytes(2, 'little'))   # –ë–ª–æ–∫ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        f.write((16).to_bytes(2, 'little'))  # –ë–∏—Ç –Ω–∞ —Å–µ–º–ø–ª
        f.write(b'data')
        f.write((0).to_bytes(4, 'little'))   # –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        return f.name


def test_ocr_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR —Å–µ—Ä–≤–∏—Å"""
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï OCR –°–ï–†–í–ò–°–ê")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        test_image = create_test_receipt_image()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as temp_file:
            test_image.save(temp_file.name, 'PNG')
            temp_path = temp_file.name
        
        # –°–æ–∑–¥–∞–µ–º Django —Ñ–∞–π–ª
        with open(temp_path, 'rb') as f:
            image_file = SimpleUploadedFile(
                name='test_receipt.png',
                content=f.read(),
                content_type='image/png'
            )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username='test_user_ocr',
            defaults={
                'telegram_id': 12345,
                'first_name': 'Test',
                'last_name': 'User'
            }
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR —Å–µ—Ä–≤–∏—Å
        ocr_service = TesseractOCRService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        status = ocr_service.get_processing_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å OCR —Å–µ—Ä–≤–∏—Å–∞:")
        print(f"   ‚úÖ Tesseract –¥–æ—Å—Ç—É–ø–µ–Ω: {status.get('tesseract_available', False)}")
        print(f"   üó£Ô∏è –Ø–∑—ã–∫–∏: {', '.join(status.get('supported_languages', []))}")
        print(f"   ‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {status.get('language_config', 'N/A')}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        print(f"\nüîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞...")
        
        ocr_result = ocr_service.process_receipt_image(
            user=user,
            image_file=image_file,
            recognition_type='receipt'
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ OCR:")
        print(f"   üÜî ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {ocr_result.id}")
        print(f"   üìÑ –°—Ç–∞—Ç—É—Å: {ocr_result.status}")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ocr_result.confidence_score:.2f}")
        print(f"   üè™ –ú–∞–≥–∞–∑–∏–Ω: {ocr_result.shop_name or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
        print(f"   üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {ocr_result.total_amount} —Å—É–º")
        print(f"   üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {ocr_result.items_count}")
        print(f"   üó£Ô∏è –Ø–∑—ã–∫: {ocr_result.language_detected or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        if ocr_result.items.exists():
            print(f"\nüõçÔ∏è –ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´:")
            for item in ocr_result.items.all()[:5]:
                print(f"   ‚Ä¢ {item.name} - {item.total_price} —Å—É–º (–∫–æ–ª: {item.quantity})")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
        if ocr_result.raw_text:
            print(f"\nüìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
            print(f"   {ocr_result.raw_text[:200]}...")
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_path)
        
        return ocr_result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_voice_service():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Voice —Å–µ—Ä–≤–∏—Å"""
    print("\nüé§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VOICE –°–ï–†–í–ò–°–ê")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Voice —Å–µ—Ä–≤–∏—Å
        voice_service = WhisperVoiceService()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        status = voice_service.get_processing_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å Voice —Å–µ—Ä–≤–∏—Å–∞:")
        print(f"   ‚úÖ Whisper –¥–æ—Å—Ç—É–ø–µ–Ω: {status.get('whisper_available', False)}")
        print(f"   ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {status.get('current_model', 'N/A')}")
        print(f"   üìÇ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(status.get('supported_formats', []))}")
        print(f"   üéØ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {status.get('model_loaded', False)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏
        languages = voice_service.get_supported_languages()
        print(f"   üó£Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: {len(languages)} (ru, uz, en, ...)")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        models = voice_service.get_available_models()
        print(f"   üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(models.keys())}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª
        test_audio_path = create_test_audio_file()
        
        # –°–æ–∑–¥–∞–µ–º Django —Ñ–∞–π–ª
        with open(test_audio_path, 'rb') as f:
            audio_file = SimpleUploadedFile(
                name='test_voice.wav',
                content=f.read(),
                content_type='audio/wav'
            )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username='test_user_voice',
            defaults={
                'telegram_id': 12346,
                'first_name': 'Voice',
                'last_name': 'User'
            }
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞—É–¥–∏–æ
        is_valid, error = voice_service.validate_audio_file(audio_file)
        print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞:")
        print(f"   ‚úÖ –§–∞–π–ª –≤–∞–ª–∏–¥–µ–Ω: {is_valid}")
        if not is_valid:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {error}")
        
        # –í —Ä–µ–∂–∏–º–µ –¥–µ–º–æ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ) —Ç–µ—Å—Ç–∏—Ä—É–µ–º demo —Ä–µ–∂–∏–º
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º demo —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è...")
        
        try:
            voice_result = voice_service.recognize_voice(
                user=user,
                audio_file=audio_file,
                language='ru',
                task='transcribe'
            )
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ VOICE:")
            print(f"   üÜî ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {voice_result.id}")
            print(f"   üìÑ –°—Ç–∞—Ç—É—Å: {voice_result.status}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {voice_result.confidence_score:.2f}")
            print(f"   üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {voice_result.recognized_text[:100]}...")
            print(f"   üó£Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —è–∑—ã–∫: {voice_result.detected_language}")
            print(f"   üìä –°–µ–≥–º–µ–Ω—Ç–æ–≤: {voice_result.segments_count}")
            print(f"   üìÅ –§–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ: {voice_result.audio_format}")
            print(f"   üíæ –†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ: {voice_result.audio_size} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            if voice_result.processing_metadata:
                metadata = voice_result.processing_metadata
                print(f"\nüìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
                for key, value in metadata.items():
                    print(f"   {key}: {value}")
            
            return voice_result
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ –¥–ª—è demo): {e}")
            return None
        
        finally:
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.unlink(test_audio_path)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Voice: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_receipt_matching(ocr_result, voice_result):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞ —Å –≥–æ–ª–æ—Å–æ–º"""
    print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        matcher = ReceiptVoiceMatcher()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        status = matcher.get_processing_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
        print(f"   ‚è∞ –ú–∞–∫—Å —Ä–∞–∑–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏: {status.get('max_time_diff_minutes', 5)} –º–∏–Ω")
        print(f"   üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {status.get('similarity_threshold', 0.6)}")
        print(f"   üìù –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤: {len(status.get('item_keywords', {}))} —è–∑—ã–∫–æ–≤")
        print(f"   üí∞ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —Å—É–º–º: {len(status.get('amount_keywords', {}))} —è–∑—ã–∫–æ–≤")
        
        if not ocr_result or not voice_result:
            print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ OCR –∏–ª–∏ Voice –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
            return None
        
        print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        match_result = matcher.match_voice_with_receipt(voice_result, ocr_result)
        
        if match_result:
            print(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
            print(f"   üÜî ID —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {match_result.id}")
            print(f"   üìÑ –°—Ç–∞—Ç—É—Å: {match_result.status}")
            print(f"   üéØ –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match_result.confidence_score:.2f}")
            print(f"   üõçÔ∏è –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {match_result.matched_items_count}")
            print(f"   ‚è∞ –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: {match_result.time_difference_minutes} –º–∏–Ω")
            print(f"   üí∞ –°—É–º–º–∞ –∏–∑ –≥–æ–ª–æ—Å–∞: {match_result.total_amount_voice} —Å—É–º")
            print(f"   üßæ –°—É–º–º–∞ –∏–∑ —á–µ–∫–∞: {match_result.total_amount_receipt} —Å—É–º")
            print(f"   üíØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å—É–º–º: {match_result.amount_match_percentage:.1f}%")
            print(f"   üìä –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {'–î–∞' if match_result.is_high_confidence else '–ù–µ—Ç'}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            if match_result.matched_items:
                print(f"\nüõçÔ∏è –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –¢–û–í–ê–†–´:")
                for item in match_result.matched_items[:5]:
                    voice_item = item.get('voice_item', {})
                    receipt_item = item.get('receipt_item', {})
                    similarity = item.get('similarity', 0)
                    
                    print(f"   ‚Ä¢ –ì–æ–ª–æ—Å: '{voice_item.get('name', 'N/A')}' ‚Üî "
                          f"–ß–µ–∫: '{receipt_item.get('name', 'N/A')}' "
                          f"({similarity:.2f} —Å—Ö–æ–∂–µ—Å—Ç—å)")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            if match_result.matching_details:
                details = match_result.matching_details
                print(f"\nüìä –î–ï–¢–ê–õ–ò –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø:")
                for key, value in details.items():
                    if isinstance(value, (int, float)):
                        print(f"   {key}: {value:.3f}")
                    else:
                        print(f"   {key}: {value}")
            
            return match_result
        else:
            print("‚ùå –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
            return None
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return None


def test_auto_matching():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = User.objects.get_or_create(
            username='test_user_auto',
            defaults={
                'telegram_id': 12347,
                'first_name': 'Auto',
                'last_name': 'User'
            }
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        matcher = ReceiptVoiceMatcher()
        
        # –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from apps.ai.models import VoiceResult
        recent_voice = VoiceResult.objects.filter(user=user).first()
        
        if recent_voice:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            matches = matcher.auto_match_recent_receipts(recent_voice)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:")
            print(f"   üìà –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {len(matches)}")
            
            for i, match in enumerate(matches[:3], 1):
                print(f"   {i}. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {match.confidence_score:.2f}, "
                      f"–¢–æ–≤–∞—Ä–æ–≤: {match.matched_items_count}, "
                      f"–í—Ä–µ–º—è: {match.time_difference_minutes} –º–∏–Ω")
        else:
            print("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OVOZPAY")
    print("=" * 60)
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º: Tesseract OCR + Whisper Voice + Receipt Matching")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º OCR
    ocr_result = test_ocr_service()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Voice
    voice_result = test_voice_service()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    if ocr_result and voice_result:
        match_result = test_receipt_matching(ocr_result, voice_result)
    else:
        print("\n‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö")
        match_result = None
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
    test_auto_matching()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    print(f"‚úÖ OCR —Å–µ—Ä–≤–∏—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if ocr_result else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ Voice —Å–µ—Ä–≤–∏—Å: {'–†–∞–±–æ—Ç–∞–µ—Ç' if voice_result else '–û—à–∏–±–∫–∞'}")
    print(f"‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ: {'–†–∞–±–æ—Ç–∞–µ—Ç' if match_result else '–ù–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ'}")
    
    if ocr_result:
        print(f"üìÑ OCR: {ocr_result.items_count} —Ç–æ–≤–∞—Ä–æ–≤, {ocr_result.total_amount} —Å—É–º")
    
    if voice_result:
        print(f"üé§ Voice: {len(voice_result.recognized_text)} —Å–∏–º–≤–æ–ª–æ–≤, {voice_result.detected_language}")
    
    if match_result:
        print(f"üéØ Match: {match_result.confidence_score:.2f} —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, {match_result.matched_items_count} —Ç–æ–≤–∞—Ä–æ–≤")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üí° –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("   ‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Whisper")
    print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ–∫–æ–≤")
    print("   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")


if __name__ == '__main__':
    main() 