"""
Django –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import json
from django.core.management.base import BaseCommand
from django.conf import settings

from apps.bot.telegram.bot_client import TelegramBotClient
from apps.bot.services.telegram_api_service import TelegramAPIService


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Telegram –±–æ—Ç–∞'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--chat-id',
            type=int,
            help='Chat ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)'
        )
        parser.add_argument(
            '--language',
            type=str,
            choices=['ru', 'en', 'uz'],
            default='ru',
            help='–Ø–∑—ã–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        )
    
    def handle(self, *args, **options):
        self.stdout.write("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ–≥–æ –±–æ—Ç–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not self.check_settings():
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        bot_client = TelegramBotClient()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        self.show_bot_info(bot_client)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        chat_id = options.get('chat_id')
        if chat_id:
            language = options.get('language', 'ru')
            self.test_multilingual_functions(bot_client, chat_id, language)
        else:
            self.stdout.write(
                self.style.WARNING(
                    "üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π —É–∫–∞–∂–∏—Ç–µ --chat-id"
                )
            )
    
    def check_settings(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        token = getattr(settings, 'TELEGRAM_BOT_TOKEN', '')
        if not token:
            self.stdout.write(
                self.style.ERROR(
                    "‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
                )
            )
            return False
        
        self.stdout.write(
            self.style.SUCCESS(
                f"‚úÖ Telegram Bot Token –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–¥–ª–∏–Ω–∞: {len(token)} —Å–∏–º–≤–æ–ª–æ–≤)"
            )
        )
        return True
    
    def show_bot_info(self, bot_client):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        info = bot_client.get_bot_info()
        
        self.stdout.write(f"\nüìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:")
        self.stdout.write(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {info['name']}")
        self.stdout.write(f"   –í–µ—Ä—Å–∏—è: {info['version']}")
        
        self.stdout.write(f"\nüöÄ –§—É–Ω–∫—Ü–∏–∏:")
        for feature in info['features']:
            self.stdout.write(f"   ‚Ä¢ {feature}")
        
        self.stdout.write(f"\nüåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:")
        for lang in info['supported_languages']:
            self.stdout.write(f"   ‚Ä¢ {lang}")
        
        self.stdout.write(f"\nüí± –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:")
        for curr in info['supported_currencies']:
            self.stdout.write(f"   ‚Ä¢ {curr}")
    
    def test_multilingual_functions(self, bot_client, chat_id, language):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        self.stdout.write(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è chat_id: {chat_id}, —è–∑—ã–∫: {language}")
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        from apps.bot.utils.translations import t
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        self.test_translations(language)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        self.test_keyboards(language)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.test_message_sending(bot_client, chat_id, language)
    
    def test_translations(self, language):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–≤–æ–¥–æ–≤"""
        from apps.bot.utils.translations import t
        
        self.stdout.write(f"\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è —è–∑—ã–∫–∞ '{language}':")
        
        test_keys = [
            'start_welcome',
            'help_title', 
            'balance_title',
            'settings_title',
            'choose_language',
            'language_set'
        ]
        
        for key in test_keys:
            text = t.get_text(key, language)
            self.stdout.write(f"   {key}: {text[:50]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ format
        formatted_text = t.get_text('currency_set', language).format('USD')
        self.stdout.write(f"   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {formatted_text}")
    
    def test_keyboards(self, language):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        from apps.bot.utils.translations import t
        
        self.stdout.write(f"\n‚å®Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä:")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —è–∑—ã–∫–æ–≤
        lang_kb = t.get_language_keyboard()
        self.stdout.write(f"   –Ø–∑—ã–∫: {len(lang_kb['inline_keyboard'])} —Ä—è–¥–æ–≤")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∞–ª—é—Ç
        curr_kb = t.get_currency_keyboard(language)
        self.stdout.write(f"   –í–∞–ª—é—Ç–∞: {len(curr_kb['inline_keyboard'])} —Ä—è–¥–æ–≤")
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_kb = t.get_settings_keyboard(language)
        self.stdout.write(f"   –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {len(settings_kb['inline_keyboard'])} —Ä—è–¥–æ–≤")
    
    def test_message_sending(self, bot_client, chat_id, language):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        from apps.bot.utils.translations import t
        
        self.stdout.write(f"\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        test_update = {
            'message': {
                'chat': {'id': chat_id},
                'from': {
                    'id': 123456789,
                    'username': 'test_user',
                    'first_name': 'Test',
                    'last_name': 'User'
                },
                'text': '/start'
            }
        }
        
        try:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã /start
            bot_client.handle_update(test_update)
            
            self.stdout.write(
                self.style.SUCCESS(
                    f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É"
                )
            )
            
            # –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            import time
            time.sleep(2)
            
            self.stdout.write(
                self.style.SUCCESS(
                    "‚úÖ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à Telegram - –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–π—Ç–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!"
                )
            )
            
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
                )
            )
    
    def show_usage_examples(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.stdout.write(f"\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        self.stdout.write(f"   python manage.py test_multilingual_bot")
        self.stdout.write(f"   python manage.py test_multilingual_bot --chat-id 123456789")
        self.stdout.write(f"   python manage.py test_multilingual_bot --chat-id 123456789 --language en")
        self.stdout.write(f"   python manage.py test_multilingual_bot --chat-id 123456789 --language uz") 