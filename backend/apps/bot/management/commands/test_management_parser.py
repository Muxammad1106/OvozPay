"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
"""

from django.core.management.base import BaseCommand
from apps.bot.services.text_parser_service import TextParserService


class Command(BaseCommand):
    help = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–µ—Ä –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞'

    def add_arguments(self, parser):
        parser.add_argument(
            '--text',
            type=str,
            help='–¢–µ–∫—Å—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞'
        )
        parser.add_argument(
            '--language',
            type=str,
            default='ru',
            choices=['ru', 'en', 'uz'],
            help='–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞'
        )

    def handle(self, *args, **options):
        parser = TextParserService()
        
        if options['text']:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
            text = options['text']
            language = options['language']
            
            self.stdout.write(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: '{text}' (—è–∑—ã–∫: {language})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            management_result = parser.parse_management_command(text, language)
            if management_result:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {management_result}"))
                return
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            transaction_result = parser.parse_transaction_text(text, language)
            if transaction_result:
                self.stdout.write(self.style.SUCCESS(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction_result}"))
                return
            
            self.stdout.write(self.style.ERROR("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å"))
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
            self.stdout.write("üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
            
            test_cases = [
                # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                ("—Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞–∫—Å–∏", 'ru'),
                ("–¥–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ–¥–∞", 'ru'),
                ("–ø–æ–º–µ–Ω—è–π —è–∑—ã–∫ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 'ru'),
                ("—Å–º–µ–Ω–∏ –≤–∞–ª—é—Ç—É –Ω–∞ –¥–æ–ª–ª–∞—Ä—ã", 'ru'),
                ("change language to english", 'en'),
                ("create category transport", 'en'),
                ("kategoriya yarat oziq-ovqat", 'uz'),
                
                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                ("–∫—É–ø–∏–ª —Å–∏–≥–∞—Ä–µ—Ç—ã –∑–∞ 20000", 'ru'),
                ("–ø–æ—Ç—Ä–∞—Ç–∏–ª 50$ –Ω–∞ —Ç–∞–∫—Å–∏", 'ru'),
                ("–∑–∞—Ä–∞–±–æ—Ç–∞–ª 1000 –¥–æ–ª–ª–∞—Ä–æ–≤", 'ru'),
            ]
            
            for text, lang in test_cases:
                self.stdout.write(f"\nüìù –¢–µ—Å—Ç: '{text}' ({lang})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                management_result = parser.parse_management_command(text, lang)
                if management_result:
                    self.stdout.write(self.style.SUCCESS(f"üéõÔ∏è –ö–æ–º–∞–Ω–¥–∞: {management_result}"))
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transaction_result = parser.parse_transaction_text(text, lang)
                if transaction_result:
                    self.stdout.write(self.style.SUCCESS(f"üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {transaction_result}"))
                    continue
                
                self.stdout.write(self.style.ERROR("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"))
            
            self.stdout.write(self.style.SUCCESS("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")) 