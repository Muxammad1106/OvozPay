"""
Django management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import asyncio
import logging
from django.core.management.base import BaseCommand, CommandError
from django.utils import timezone


class Command(BaseCommand):
    help = '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ AI —Å–µ—Ä–≤–∏—Å—ã OvozPay'
    
    def add_arguments(self, parser):
        parser.add_argument(
            '--check-only',
            action='store_true',
            help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤, –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å'
        )
        
        parser.add_argument(
            '--install-deps',
            action='store_true',
            help='–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'
        )
    
    def handle(self, *args, **options):
        self.stdout.write(
            self.style.HTTP_INFO('üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤ OvozPay...')
        )
        
        if options.get('install_deps'):
            self._show_installation_instructions()
            return
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            missing_deps = self._check_dependencies()
            
            if missing_deps:
                self.stdout.write(
                    self.style.ERROR('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:')
                )
                for dep in missing_deps:
                    self.stdout.write(f"  - {dep}")
                
                self.stdout.write('')
                self.stdout.write(
                    self.style.WARNING('üí° –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:')
                )
                self.stdout.write('pip install -r requirements.txt')
                self.stdout.write('')
                self.stdout.write('–ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python manage.py init_ai_services --install-deps')
                return
            
            self.stdout.write(
                self.style.SUCCESS('‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤  
            if options.get('check_only'):
                self._check_services_status()
            else:
                self.stdout.write(
                    self.style.HTTP_INFO('‚ÑπÔ∏è –î–ª—è –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --check-only')
                )
                
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'üí• –û—à–∏–±–∫–∞: {e}')
            )
            raise CommandError(f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å AI —Å–µ—Ä–≤–∏—Å—ã: {e}')
    
    def _check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        missing = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ AI –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        deps_to_check = [
            ('whisper', 'openai-whisper'),
            ('easyocr', 'easyocr'),
            ('cv2', 'opencv-python'),
            ('httpx', 'httpx'),
            ('numpy', 'numpy')
        ]
        
        for import_name, package_name in deps_to_check:
            try:
                __import__(import_name)
                self.stdout.write(f'‚úÖ {package_name}')
            except ImportError:
                missing.append(package_name)
                self.stdout.write(f'‚ùå {package_name}')
        
        return missing
    
    def _check_services_status(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å AI —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.stdout.write(
            self.style.HTTP_INFO('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º AI —Å–µ—Ä–≤–∏—Å—ã...')
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
        try:
            from services.ai.voice_recognition.whisper_service import whisper_service
            self.stdout.write('‚úÖ WhisperService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
            
            status = whisper_service.get_service_status()
            if status.get('whisper_installed'):
                self.stdout.write('‚úÖ Whisper CLI –¥–æ—Å—Ç—É–ø–µ–Ω')
            else:
                self.stdout.write('‚ö†Ô∏è Whisper CLI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                
        except ImportError as e:
            self.stdout.write(f'‚ùå WhisperService: {e}')
        
        try:
            from services.ai.ocr.easyocr_service import easyocr_service
            self.stdout.write('‚úÖ EasyOCRService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
            
            status = easyocr_service.get_service_status()
            if status.get('easyocr_available'):
                self.stdout.write('‚úÖ EasyOCR –¥–æ—Å—Ç—É–ø–µ–Ω')
            else:
                self.stdout.write('‚ö†Ô∏è EasyOCR –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
                
        except ImportError as e:
            self.stdout.write(f'‚ùå EasyOCRService: {e}')
        
        try:
            from services.ai.text_processing.nlp_service import nlp_service
            self.stdout.write('‚úÖ NLPService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
            
            status = nlp_service.get_service_status()
            self.stdout.write(f'‚úÖ NLP: {len(status.get("expense_categories", []))} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤')
            
        except ImportError as e:
            self.stdout.write(f'‚ùå NLPService: {e}')
        
        try:
            from services.currency_service import currency_service
            self.stdout.write('‚úÖ CurrencyService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω')
            
        except ImportError as e:
            self.stdout.write(f'‚ùå CurrencyService: {e}')
        
        self.stdout.write('')
        self.stdout.write(
            self.style.SUCCESS('üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
    
    def _show_installation_instructions(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        self.stdout.write(
            self.style.HTTP_INFO('üì¶ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –î–õ–Ø AI –°–ï–†–í–ò–°–û–í')
        )
        self.stdout.write('=' * 50)
        
        self.stdout.write('1. –û–±–Ω–æ–≤–∏—Ç–µ pip:')
        self.stdout.write('   pip install --upgrade pip')
        self.stdout.write('')
        
        self.stdout.write('2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:')
        self.stdout.write('   pip install -r requirements.txt')
        self.stdout.write('')
        
        self.stdout.write('3. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–µ–æ/–∞—É–¥–∏–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg:')
        self.stdout.write('   # macOS:')
        self.stdout.write('   brew install ffmpeg')
        self.stdout.write('')
        self.stdout.write('   # Ubuntu/Debian:')
        self.stdout.write('   sudo apt update && sudo apt install ffmpeg')
        self.stdout.write('')
        
        self.stdout.write('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É:')
        self.stdout.write('   python manage.py init_ai_services --check-only')
        self.stdout.write('')
        
        self.stdout.write(
            self.style.WARNING('‚ö†Ô∏è –°–ò–°–¢–ï–ú–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:')
        )
        self.stdout.write('- Python 3.8+')
        self.stdout.write('- 4GB+ RAM')
        self.stdout.write('- 2GB+ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞')
        self.stdout.write('- ffmpeg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ')
        self.stdout.write('')
