import asyncio
import aiohttp
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook Telegram –±–æ—Ç–∞'

    def handle(self, *args, **options):
        bot_token = settings.TELEGRAM_BOT_TOKEN
        url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"

        result = asyncio.run(self._check_webhook_info(url))
        
        if result.get('ok'):
            webhook_info = result.get('result', {})
            
            self.stdout.write(self.style.SUCCESS('üìä –°—Ç–∞—Ç—É—Å Webhook:'))
            self.stdout.write(f"URL: {webhook_info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
            self.stdout.write(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {'–î–∞' if webhook_info.get('has_custom_certificate') else '–ù–µ—Ç'}")
            self.stdout.write(f"–û–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {webhook_info.get('pending_update_count', 0)}")
            
            allowed_updates = webhook_info.get('allowed_updates', [])
            if allowed_updates:
                self.stdout.write(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {', '.join(allowed_updates)}")
            else:
                self.stdout.write("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –í—Å–µ")
                
            last_error = webhook_info.get('last_error_message')
            if last_error:
                self.stdout.write(
                    self.style.WARNING(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
                )
                last_error_date = webhook_info.get('last_error_date')
                if last_error_date:
                    from datetime import datetime
                    error_date = datetime.fromtimestamp(last_error_date)
                    self.stdout.write(f"–í—Ä–µ–º—è –æ—à–∏–±–∫–∏: {error_date}")
            
            if webhook_info.get('url'):
                self.stdout.write(self.style.SUCCESS('‚úÖ Webhook –∞–∫—Ç–∏–≤–µ–Ω'))
            else:
                self.stdout.write(self.style.WARNING('‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'))
                
        else:
            error_msg = result.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {error_msg}')
            )

    async def _check_webhook_info(self, url):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    return await response.json()
        except Exception as e:
            return {'ok': False, 'description': str(e)} 