"""
–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Whisper –º–æ–¥–µ–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
"""

import asyncio
import time
import tempfile
import os
from django.core.management.base import BaseCommand
from services.ai.voice_recognition.whisper_service import WhisperService


class Command(BaseCommand):
    help = '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å Whisper —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è'

    def add_arguments(self, parser):
        parser.add_argument(
            '--model',
            type=str,
            default='tiny',
            help='–ú–æ–¥–µ–ª—å Whisper –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (tiny, base, small, medium, large)'
        )
        
        parser.add_argument(
            '--benchmark',
            action='store_true',
            help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫ —Å–∫–æ—Ä–æ—Å—Ç–∏'
        )

    def handle(self, *args, **options):
        asyncio.run(self._run_optimization(options))

    async def _run_optimization(self, options):
        self.stdout.write('\nüöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø WHISPER –î–õ–Ø –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ô –°–ö–û–†–û–°–¢–ò\n')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
        whisper_service = WhisperService()
        whisper_service.model_name = options['model']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        status = whisper_service.get_service_status()
        self.stdout.write(f"üìä –°—Ç–∞—Ç—É—Å Whisper: {status['status']}")
        self.stdout.write(f"üéØ –ú–æ–¥–µ–ª—å: {status['model']}")
        self.stdout.write(f"üåç –Ø–∑—ã–∫–∏: {status['supported_languages']}")
        
        if not status.get('whisper_installed'):
            self.stdout.write(
                self.style.ERROR("‚ùå Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openai-whisper")
            )
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.stdout.write(f"\nüì• –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å {whisper_service.model_name}...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ)
        test_audio = await self._create_test_audio()
        
        if options['benchmark']:
            await self._run_benchmark(whisper_service, test_audio)
        else:
            await self._test_basic_recognition(whisper_service, test_audio)
            
        # –û—á–∏—Å—Ç–∫–∞
        if test_audio and os.path.exists(test_audio):
            os.unlink(test_audio)

    async def _create_test_audio(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ —Ñ–∞–π–ª"""
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π OGG —Ñ–∞–π–ª
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as f:
            # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            f.write(b'FAKE_AUDIO_DATA')  # Placeholder
            return f.name

    async def _test_basic_recognition(self, whisper_service, audio_file):
        """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"""
        self.stdout.write("\nüß™ –ë–ê–ó–û–í–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        
        languages = ['ru', 'en', 'uz']
        
        for language in languages:
            try:
                start_time = time.time()
                
                result = await whisper_service.transcribe_audio(
                    audio_file, 
                    language=language,
                    user_id='test_user'
                )
                
                end_time = time.time()
                duration = end_time - start_time
                
                if result:
                    self.stdout.write(
                        f"‚úÖ {language.upper()}: {duration:.1f}—Å | "
                        f"–¢–µ–∫—Å—Ç: '{result.get('text', '–ü—É—Å—Ç–æ')[:30]}...'"
                    )
                else:
                    self.stdout.write(
                        f"‚ö†Ô∏è {language.upper()}: {duration:.1f}—Å | –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
                    )
                    
            except Exception as e:
                self.stdout.write(
                    self.style.ERROR(f"‚ùå {language.upper()}: –û—à–∏–±–∫–∞ - {e}")
                )

    async def _run_benchmark(self, whisper_service, audio_file):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.stdout.write("\nüèÅ –ë–ï–ù–ß–ú–ê–†–ö –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        
        models = ['tiny', 'base', 'small']
        test_count = 3
        
        results = {}
        
        for model in models:
            self.stdout.write(f"\nüî¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
            whisper_service.model_name = model
            
            times = []
            
            for i in range(test_count):
                try:
                    start_time = time.time()
                    
                    result = await whisper_service.transcribe_audio(
                        audio_file,
                        language='ru',
                        user_id=f'benchmark_user_{i}'
                    )
                    
                    end_time = time.time()
                    duration = end_time - start_time
                    times.append(duration)
                    
                    self.stdout.write(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}: {duration:.1f}—Å")
                    
                except Exception as e:
                    self.stdout.write(f"  –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –û–®–ò–ë–ö–ê - {e}")
                    times.append(999)  # –ë–æ–ª—å—à–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—à–∏–±–æ–∫
            
            avg_time = sum(times) / len(times)
            min_time = min(times)
            results[model] = {'avg': avg_time, 'min': min_time, 'times': times}
            
            self.stdout.write(f"  üìä –°—Ä–µ–¥–Ω–µ–µ: {avg_time:.1f}—Å | –ú–∏–Ω–∏–º—É–º: {min_time:.1f}—Å")
        
        # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.stdout.write("\nüìà –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        sorted_models = sorted(results.items(), key=lambda x: x[1]['avg'])
        
        for i, (model, stats) in enumerate(sorted_models):
            rank = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "üìç"
            self.stdout.write(
                f"{rank} {model}: {stats['avg']:.1f}—Å (–º–∏–Ω: {stats['min']:.1f}—Å)"
            )
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_model = sorted_models[0][0]
        best_time = sorted_models[0][1]['avg']
        
        self.stdout.write(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        self.stdout.write(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–æ–¥–µ–ª—å '{best_model}' –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏")
        self.stdout.write(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {best_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if best_time > 2.0:
            self.stdout.write(
                self.style.WARNING(
                    "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –í—Ä–µ–º—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 —Å–µ–∫—É–Ω–¥—ã.\n"
                    "   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è:\n"
                    "   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GPU: pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118\n"
                    "   2. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏: pip install --upgrade openai-whisper\n"
                    "   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ SSD –¥–∏—Å–∫ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"
                )
            )
        else:
            self.stdout.write("‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞!")
        
        self.stdout.write('\nüèÜ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!') 