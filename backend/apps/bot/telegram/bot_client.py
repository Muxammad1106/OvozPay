"""
–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç Telegram –±–æ—Ç–∞ –¥–ª—è OvozPay
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∏ AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""

import logging
import asyncio
import threading
from typing import Dict, Any
from django.conf import settings

from ..services.telegram_api_service import TelegramAPIService
from ..services.user_service import UserService
from ..handlers.basic_handlers import BasicHandlers
from ..handlers.voice_handlers import VoiceHandlers
from ..handlers.photo_handlers import PhotoHandlers

logger = logging.getLogger(__name__)


class TelegramBotClient:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram
    """
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        self.user_service = UserService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.basic_handlers = BasicHandlers()
        self.voice_handlers = VoiceHandlers()
        self.photo_handlers = PhotoHandlers()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ –∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º
        self.command_handlers = {
            '/start': self.basic_handlers.handle_start_command,
            '/menu': self.basic_handlers.handle_menu_command,
            '/help': self.basic_handlers.handle_help_command,
            '/balance': self.basic_handlers.handle_balance_command,
            '/settings': self.basic_handlers.handle_settings_command,
        }
    
    def handle_update(self, update: Dict[str, Any]) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        """
        try:
            logger.info(f"Processing update: {update}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            if 'message' in update:
                self._handle_message(update)
            elif 'callback_query' in update:
                self._handle_callback_query(update)
            else:
                logger.warning(f"Unknown update type: {update}")
                
        except Exception as e:
            logger.error(f"Error processing update: {e}")
    
    def _handle_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            message = update.get('message', {})
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id = message.get('chat', {}).get('id')
            if chat_id:
                self._run_async_in_thread(self.user_service.update_user_activity(chat_id))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if 'text' in message:
                self._handle_text_message(update)
            elif 'voice' in message:
                self._handle_voice_message(update)
            elif 'photo' in message:
                self._handle_photo_message(update)
            elif 'contact' in message:
                self._handle_contact_message(update)
            else:
                # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                self._handle_unsupported_message(update)
                    
        except Exception as e:
            logger.error(f"Error handling message: {e}")
    
    def _handle_text_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            message = update.get('message', {})
            text = message.get('text', '').strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
            if text.startswith('/'):
                self._handle_command(update)
            else:
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                self._run_async_in_thread(
                    self.basic_handlers.handle_text_message(update)
                )
                
        except Exception as e:
            logger.error(f"Error handling text message: {e}")
    
    def _handle_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        """
        try:
            message = update.get('message', {})
            text = message.get('text', '').strip()
            command = text.split()[0].lower()
            
            if command in self.command_handlers:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã
                self._run_async_in_thread(
                    self.command_handlers[command](update)
                )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
                self._run_async_in_thread(
                    self.basic_handlers.handle_text_message(update)
                )
                
        except Exception as e:
            logger.error(f"Error handling command: {e}")
    
    def _handle_voice_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            self._run_async_in_thread(
                self.voice_handlers.handle_voice_message(update)
            )
            
        except Exception as e:
            logger.error(f"Error handling voice message: {e}")
    
    def _handle_photo_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        """
        try:
            self._run_async_in_thread(
                self.photo_handlers.handle_photo_message(update)
            )
            
        except Exception as e:
            logger.error(f"Error handling photo message: {e}")
    
    def _handle_callback_query(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
        """
        try:
            self._run_async_in_thread(
                self.basic_handlers.handle_callback_query(update)
            )
            
        except Exception as e:
            logger.error(f"Error handling callback query: {e}")
    
    def _handle_contact_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (–Ω–æ–º–µ—Ä–∞–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤)
        """
        try:
            message = update.get('message', {})
            contact = message.get('contact', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id or not contact:
                return
            
            phone_number = contact.get('phone_number', '')
            if phone_number:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                self._run_async_in_thread(
                    self.user_service.update_user_phone(chat_id, phone_number)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                self._run_async_in_thread(
                    self._send_phone_confirmation(chat_id)
                )
            
        except Exception as e:
            logger.error(f"Error handling contact message: {e}")
    
    def _handle_unsupported_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if chat_id:
                self._run_async_in_thread(
                    self._send_unsupported_message_info(chat_id)
                )
            
        except Exception as e:
            logger.error(f"Error handling unsupported message: {e}")
    
    async def _send_phone_confirmation(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            
            from ..utils.translations import t
            confirmation_text = t.get_text('phone_set', language)
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=confirmation_text
            )
            
        except Exception as e:
            logger.error(f"Error sending phone confirmation: {e}")
    
    async def _send_unsupported_message_info(self, chat_id: int) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º —Ç–∏–ø–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            
            from ..utils.translations import t
            
            if language == 'ru':
                text = (
                    "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
                    "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:\n"
                    "üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
                    "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —á–µ–∫–æ–≤\n"
                    "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã"
                )
            elif language == 'en':
                text = (
                    "‚ùå Unsupported message type.\n\n"
                    "Supported:\n"
                    "üé§ Voice messages\n"
                    "üì∏ Receipt photos\n"
                    "üìù Text commands"
                )
            else:  # uz
                text = (
                    "‚ùå Qo'llab-quvvatlanmaydigan xabar turi.\n\n"
                    "Qo'llab-quvvatlanadi:\n"
                    "üé§ Ovozli xabarlar\n"
                    "üì∏ Chek rasmlari\n"
                    "üìù Matnli buyruqlar"
                )
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=text
            )
            
        except Exception as e:
            logger.error(f"Error sending unsupported message info: {e}")
    
    def _run_async_in_thread(self, coro) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        """
        def run_async():
            try:
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(coro)
                loop.close()
            except Exception as e:
                logger.error(f"Error in async thread: {e}")
        
        thread = threading.Thread(target=run_async)
        thread.start()
    
    def get_bot_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
        return {
            'name': 'OvozPay Bot',
            'version': '2.0.0',
            'features': [
                'Multilingual interface (ru/en/uz)',
                'Voice command processing',
                'Receipt photo OCR',
                'Financial transaction management',
                'AI-powered text analysis'
            ],
            'supported_languages': ['ru', 'en', 'uz'],
            'supported_currencies': ['UZS', 'USD', 'EUR', 'RUB']
        } 