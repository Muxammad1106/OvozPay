import logging
from typing import Dict, Any
from asgiref.sync import sync_to_async
from django.conf import settings
from django.core.exceptions import ValidationError
from apps.users.models import User
from apps.transactions.models import Transaction
from ..services.telegram_api_service import TelegramAPIService

logger = logging.getLogger(__name__)


class BasicCommandHandlers:
    """
    –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    """
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
    
    async def handle_start_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        """
        try:
            message = update.get('message', {})
            chat = message.get('chat', {})
            chat_id = chat.get('id')
            from_user = message.get('from', {})
            
            if not chat_id:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ /start")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            user = await self._get_or_create_user(
                telegram_chat_id=chat_id,
                first_name=from_user.get('first_name', ''),
                last_name=from_user.get('last_name', ''),
                username=from_user.get('username', '')
            )
            
            if user:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                display_name = from_user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                if user.phone_number and not user.phone_number.startswith('tg_'):
                    # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    welcome_text = (
                        f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {display_name}!\n\n"
                        f"üí∞ –í–∞—à —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ OvozPay –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n"
                        f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        f"üîπ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n"
                        f"üîπ /help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n"
                        f"üîπ /phone +–Ω–æ–º–µ—Ä - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                        f"üéô –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!"
                    )
                    
                    await self.telegram_api.send_message(
                        chat_id=chat_id,
                        text=welcome_text
                    )
                else:
                    # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    welcome_text = (
                        f"üëã –ü—Ä–∏–≤–µ—Ç, {display_name}!\n\n"
                        f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OvozPay - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üí∞\n\n"
                        f"üì± –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è"
                    )
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
                    keyboard = {
                        "keyboard": [
                            [
                                {
                                    "text": "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                                    "request_contact": True
                                }
                            ]
                        ],
                        "resize_keyboard": True,
                        "one_time_keyboard": True
                    }
                    
                    await self.telegram_api.send_message(
                        chat_id=chat_id,
                        text=welcome_text,
                        reply_markup=keyboard
                    )
                
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω/–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
            else:
                error_text = (
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=error_text
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")
    
    async def handle_balance_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ /balance")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            user = await self._get_user_by_chat_id(chat_id)
            
            if not user:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            transactions = await self._get_user_transactions(user)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            total_income = sum(t.amount for t in transactions if t.transaction_type == 'income')
            total_expense = sum(t.amount for t in transactions if t.transaction_type == 'expense')
            balance = total_income - total_expense
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–æ–º
            balance_text = (
                f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n\n"
                f"üìà –î–æ—Ö–æ–¥—ã: {total_income:,} —Å—É–º\n"
                f"üìâ –†–∞—Å—Ö–æ–¥—ã: {total_expense:,} —Å—É–º\n"
                f"üíµ –ë–∞–ª–∞–Ω—Å: {balance:,} —Å—É–º\n\n"
                f"üìä –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}"
            )
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=balance_text
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {balance}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /balance: {e}")
    
    async def handle_help_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ /help")
                return
            
            help_text = (
                "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º OvozPay\n\n"
                "üîπ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "üîπ /balance - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å\n"
                "üîπ /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "üîπ /phone +–Ω–æ–º–µ—Ä - –æ–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
                "üéô **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.\n\n"
                "üìù **–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑:**\n"
                "‚Ä¢ \"–ü–æ—Ç—Ä–∞—Ç–∏–ª 25000 —Å—É–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã\"\n"
                "‚Ä¢ \"–ó–∞—Ä–∞–±–æ—Ç–∞–ª 150000 —Å—É–º –∑–∞ –ø—Ä–æ–µ–∫—Ç\"\n"
                "‚Ä¢ \"–ö—É–ø–∏–ª –∫–æ—Ñ–µ –∑–∞ 12000 —Å—É–º\"\n\n"
                "üí° **–°–æ–≤–µ—Ç—ã:**\n"
                "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ\n"
                "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–æ–≤–∞ \"–ø–æ—Ç—Ä–∞—Ç–∏–ª\" –∏–ª–∏ \"–∑–∞—Ä–∞–±–æ—Ç–∞–ª\"\n\n"
                "üÜò –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=help_text
            )
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /help: {e}")
    
    async def handle_phone_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /phone
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '').strip()
            
            if not chat_id:
                logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ /phone")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
            command_parts = text.split()
            if len(command_parts) < 2:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=(
                        "üì± –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
                        "–ü—Ä–∏–º–µ—Ä: /phone +998901234567"
                    )
                )
                return
            
            phone_number = command_parts[1]
            
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            if not phone_number.startswith('+') or len(phone_number) < 10:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: +998901234567"
                    )
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            user = await self._get_user_by_chat_id(chat_id)
            
            if not user:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=(
                        "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
                        "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                    )
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            success = await self._update_user_phone(user, phone_number)
            
            if success:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {phone_number}"
                )
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}: {phone_number}")
            else:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /phone: {e}")
    
    @sync_to_async
    def _get_or_create_user(self, telegram_chat_id: int, first_name: str, 
                          last_name: str, username: str):
        """
        –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_chat_id
        """
        try:
            user, created = User.get_or_create_by_telegram(
                telegram_chat_id=telegram_chat_id,
                first_name=first_name,
                last_name=last_name,
                username=username
            )
            
            return user
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    @sync_to_async
    def _get_user_by_chat_id(self, chat_id: int):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_chat_id
        """
        try:
            return User.objects.filter(telegram_chat_id=chat_id).first()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
            return None
    
    @sync_to_async
    def _get_user_transactions(self, user):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            return list(Transaction.objects.filter(user=user).order_by('-created_at'))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            return []
    
    @sync_to_async
    def _update_user_phone(self, user, phone_number: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            user.phone_number = phone_number
            user.save()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {e}")
            return False 