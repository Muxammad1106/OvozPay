from typing import Dict, Any
from apps.users.models import User
from apps.analytics.models import Balance
from apps.bot.telegram.services.telegram_api_service import TelegramAPIService
from apps.bot.models import BotSession
import logging

logger = logging.getLogger(__name__)


class BasicHandlers:
    def __init__(self):
        self.telegram_service = TelegramAPIService()
    
    async def start_handler(self, update_data: Dict[str, Any]) -> None:
        message = update_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        from_user = message.get('from', {})
        telegram_user_id = from_user.get('id')
        username = from_user.get('username', '')
        first_name = from_user.get('first_name', '')
        
        if not chat_id or not telegram_user_id:
            return
        
        try:
            session, created = BotSession.objects.get_or_create(
                telegram_chat_id=chat_id,
                defaults={
                    'is_active': True,
                    'session_type': 'text'
                }
            )
            
            if created:
                session.user = await self._get_or_create_user_by_telegram_id(telegram_user_id)
                session.save()
            
            session.add_message()
            
            welcome_text = f"""
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OvozPay!</b>

–ü—Ä–∏–≤–µ—Ç, {first_name}! üëã

–Ø –≤–∞—à –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏. 
–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:

üí∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
üéØ –£–ø—Ä–∞–≤–ª—è—Ç—å —Ü–µ–ª—è–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è  
üìä –ü–æ–ª—É—á–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ —Ç—Ä–∞—Ç–∞–º
üí≥ –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –¥–æ–ª–≥–∏

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/balance - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!
"""
            
            await self.telegram_service.send_message_async(
                chat_id=chat_id,
                text=welcome_text
            )
            
        except Exception as e:
            logger.error(f"Error in start_handler: {str(e)}")
            await self.telegram_service.send_message_async(
                chat_id=chat_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def balance_handler(self, update_data: Dict[str, Any]) -> None:
        message = update_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        from_user = message.get('from', {})
        telegram_user_id = from_user.get('id')
        
        if not chat_id or not telegram_user_id:
            return
        
        try:
            user = await self._get_user_by_telegram_id(telegram_user_id)
            
            if not user:
                await self.telegram_service.send_message_async(
                    chat_id=chat_id,
                    text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            balance = Balance.get_or_create_for_user(user)
            balance.update_balance()
            
            balance_text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å</b>

–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{balance.amount} UZS</b>

üì± –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
"""
            
            await self.telegram_service.send_message_async(
                chat_id=chat_id,
                text=balance_text
            )
            
            session = BotSession.objects.filter(
                telegram_chat_id=chat_id,
                is_active=True
            ).first()
            
            if session:
                session.add_message()
                session.add_command()
            
        except Exception as e:
            logger.error(f"Error in balance_handler: {str(e)}")
            await self.telegram_service.send_message_async(
                chat_id=chat_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."
            )
    
    async def help_handler(self, update_data: Dict[str, Any]) -> None:
        message = update_data.get('message', {})
        chat_id = message.get('chat', {}).get('id')
        
        if not chat_id:
            return
        
        help_text = """
ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º OvozPay</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/balance - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

<b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
üé§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è:
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç: "–ü–æ—Ç—Ä–∞—Ç–∏–ª 50000 –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã"
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–æ–≤: "–ü–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É 2000000"
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è —Ü–µ–ª–µ–π: "–•–æ—á—É –Ω–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω 5000000"

<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
üí≥ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–æ–ª–≥–æ–≤

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!
"""
        
        try:
            await self.telegram_service.send_message_async(
                chat_id=chat_id,
                text=help_text
            )
            
            session = BotSession.objects.filter(
                telegram_chat_id=chat_id,
                is_active=True
            ).first()
            
            if session:
                session.add_message()
                
        except Exception as e:
            logger.error(f"Error in help_handler: {str(e)}")
    
    async def _get_user_by_telegram_id(self, telegram_id: int) -> User:
        try:
            session = BotSession.objects.filter(
                telegram_chat_id=telegram_id,
                user__isnull=False
            ).first()
            
            return session.user if session else None
        except Exception:
            return None
    
    async def _get_or_create_user_by_telegram_id(self, telegram_id: int) -> User:
        user = await self._get_user_by_telegram_id(telegram_id)
        
        if not user:
            user = User.objects.create(
                phone_number=f"+{telegram_id}",
                language='ru'
            )
            
        return user


start_handler = BasicHandlers().start_handler
balance_handler = BasicHandlers().balance_handler
help_handler = BasicHandlers().help_handler 