"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram Bot
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI OCR –º–æ–¥—É–ª–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–æ–≤
"""

import logging
import os
import tempfile
from typing import Dict, Any
from decimal import Decimal

from telegram import Update
from telegram.ext import CallbackContext
from django.core.files.uploadedfile import InMemoryUploadedFile

from apps.users.models import User
from apps.ai.services.ocr.tesseract_service import TesseractOCRService
from apps.ai.services.nlp.receipt_matcher import ReceiptVoiceMatcher
from apps.ai.models import OCRResult, VoiceResult, ReceiptVoiceMatch
from apps.transactions.services.transaction_service import TransactionService
from apps.categories.models import Category
from datetime import timedelta


logger = logging.getLogger(__name__)


class PhotoMessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.ocr_service = TesseractOCRService()
        self.transaction_service = TransactionService()
        self.receipt_matcher = ReceiptVoiceMatcher()
    
    async def handle_photo_message(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞)
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = update.effective_user
            user = await self._get_or_create_user(telegram_user)
            
            if not user:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...\nüîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏ —Ç–æ–≤–∞—Ä—ã..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            photo_file = await photo.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–æ—Ç–æ
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_path = temp_file.name
                await photo_file.download_to_drive(temp_path)
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ OCR
                ocr_result = await self._process_receipt_ocr(temp_path, user, processing_message)
                
                if not ocr_result or ocr_result.status == 'failed':
                    await processing_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞: {ocr_result.error_message if ocr_result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                        "‚Ä¢ –î–µ—Ä–∂–∞—Ç—å –∫–∞–º–µ—Ä—É —Ä–æ–≤–Ω–æ\n"
                        "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω"
                    )
                    return
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                transactions_created = await self._create_transactions_from_receipt(
                    ocr_result, user, processing_message
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_receipt_result(
                    update, ocr_result, transactions_created, processing_message
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await self._try_auto_match_with_voice(update, ocr_result, user)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception:
                pass
    
    async def _get_or_create_user(self, telegram_user) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = User.objects.filter(telegram_id=telegram_user.id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.objects.create(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username or f"user_{telegram_user.id}",
                    first_name=telegram_user.first_name or "",
                    last_name=telegram_user.last_name or "",
                    is_active=True
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.telegram_id})")
            
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def _process_receipt_ocr(self, image_path: str, user: User, 
                                 processing_message) -> OCRResult:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ–∫–∞ —á–µ—Ä–µ–∑ OCR
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            OCRResult: –†–µ–∑—É–ª—å—Ç–∞—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º Django UploadedFile –æ–±—ä–µ–∫—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(image_path, 'rb') as f:
                file_data = f.read()
                
            # –°–æ–∑–¥–∞–µ–º InMemoryUploadedFile –¥–ª—è OCR —Å–µ—Ä–≤–∏—Å–∞
            uploaded_file = InMemoryUploadedFile(
                file=None,
                field_name='image',
                name='receipt.jpg',
                content_type='image/jpeg',
                size=len(file_data),
                charset=None
            )
            uploaded_file._file = tempfile.BytesIO(file_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_message.edit_text(
                "üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ\nüîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR..."
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            ocr_result = self.ocr_service.process_receipt_image(
                user=user,
                image_file=uploaded_file,
                recognition_type='receipt'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_message.edit_text(
                f"‚úÖ OCR –∑–∞–≤–µ—Ä—à–µ–Ω\nüìù –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {ocr_result.items_count}\n"
                f"üè™ –ú–∞–≥–∞–∑–∏–Ω: {ocr_result.shop_name or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
                f"üí∞ –°—É–º–º–∞: {ocr_result.total_amount} —Å—É–º\n"
                "üîÑ –°–æ–∑–¥–∞—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏..."
            )
            
            return ocr_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
            return None
    
    async def _create_transactions_from_receipt(self, ocr_result: OCRResult, user: User,
                                              processing_message) -> list:
        """
        –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞
        
        Args:
            ocr_result: –†–µ–∑—É–ª—å—Ç–∞—Ç OCR
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        """
        created_transactions = []
        
        try:
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –ø–æ –æ–±—â–µ–π —Å—É–º–º–µ —á–µ–∫–∞
            if ocr_result.total_amount > 0:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü–æ–∫—É–ø–∫–∏"
                category, created = Category.objects.get_or_create(
                    user=user,
                    name='–ü–æ–∫—É–ø–∫–∏',
                    defaults={
                        'description': '–ü–æ–∫—É–ø–∫–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–∞—Ö (–∏–∑ —á–µ–∫–æ–≤)',
                        'category_type': 'expense'
                    }
                )
                
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞—Å—Ö–æ–¥–∞
                transaction = self.transaction_service.create_expense(
                    user=user,
                    amount=ocr_result.total_amount,
                    description=f"–ü–æ–∫—É–ø–∫–∏ –≤ {ocr_result.shop_name or '–º–∞–≥–∞–∑–∏–Ω–µ'} (—á–µ–∫ #{ocr_result.receipt_number})",
                    category=category,
                    date=ocr_result.receipt_date,
                    check_balance=False  # –ù–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —á–µ–∫–æ–≤
                )
                
                created_transactions.append(transaction)
                
                logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ {transaction.id} –∏–∑ —á–µ–∫–∞ {ocr_result.id}")
            
            return created_transactions
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ —á–µ–∫–∞: {e}")
            return []
    
    async def _send_receipt_result(self, update: Update, ocr_result: OCRResult,
                                 transactions_created: list, processing_message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            ocr_result: –†–µ–∑—É–ª—å—Ç–∞—Ç OCR
            transactions_created: –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            if transactions_created:
                # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                message = f"‚úÖ **–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!**\n\n"
                message += f"üè™ **–ú–∞–≥–∞–∑–∏–Ω:** {ocr_result.shop_name or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
                
                if ocr_result.receipt_date:
                    message += f"üìÖ **–î–∞—Ç–∞:** {ocr_result.receipt_date.strftime('%d.%m.%Y %H:%M')}\n"
                
                if ocr_result.receipt_number:
                    message += f"üßæ **–ù–æ–º–µ—Ä —á–µ–∫–∞:** {ocr_result.receipt_number}\n"
                
                message += f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {ocr_result.total_amount:,.0f} —Å—É–º\n"
                message += f"üì¶ **–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {ocr_result.items_count}\n\n"
                
                message += f"üí∏ **–°–æ–∑–¥–∞–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:** {len(transactions_created)}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å–ª–∏ –∏—Ö –Ω–µ–º–Ω–æ–≥–æ
                if ocr_result.items_count <= 5:
                    message += "\nüìù **–¢–æ–≤–∞—Ä—ã:**\n"
                    for item in ocr_result.items.all()[:5]:
                        message += f"‚Ä¢ {item.name} ‚Äî {item.total_price:,.0f} —Å—É–º\n"
                elif ocr_result.items_count > 5:
                    message += f"\nüìù **–¢–æ–≤–∞—Ä—ã (–ø–æ–∫–∞–∑–∞–Ω–æ 5 –∏–∑ {ocr_result.items_count}):**\n"
                    for item in ocr_result.items.all()[:5]:
                        message += f"‚Ä¢ {item.name} ‚Äî {item.total_price:,.0f} —Å—É–º\n"
                    message += f"... –∏ –µ—â–µ {ocr_result.items_count - 5} —Ç–æ–≤–∞—Ä–æ–≤\n"
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
                try:
                    current_balance = self.transaction_service._get_user_balance(ocr_result.user)
                    message += f"\nüí≥ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** {current_balance:,.0f} —Å—É–º"
                except:
                    pass
                
                await processing_message.edit_text(message, parse_mode='Markdown')
                
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                message = f"‚ö†Ô∏è **–ß–µ–∫ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã**\n\n"
                message += f"üè™ **–ú–∞–≥–∞–∑–∏–Ω:** {ocr_result.shop_name or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
                message += f"üí∞ **–°—É–º–º–∞:** {ocr_result.total_amount} —Å—É–º\n"
                message += f"üì¶ **–¢–æ–≤–∞—Ä–æ–≤:** {ocr_result.items_count}\n\n"
                message += "‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
                
                await processing_message.edit_text(message, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ–∫–∞: {e}")
            try:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            except Exception:
                pass
    
    async def _try_auto_match_with_voice(self, update: Update, ocr_result: OCRResult, user: User) -> None:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —á–µ–∫ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            ocr_result: –†–µ–∑—É–ª—å—Ç–∞—Ç OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            # –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            recent_voice_results = VoiceResult.objects.filter(
                user=user,
                status='completed',
                created_at__gte=ocr_result.created_at - timedelta(minutes=5)
            ).order_by('-created_at')[:3]
            
            if not recent_voice_results.exists():
                return
            
            best_match = None
            best_confidence = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for voice_result in recent_voice_results:
                try:
                    match = self.receipt_matcher.match_voice_with_receipt(
                        voice_result, ocr_result
                    )
                    
                    if match and match.confidence_score > best_confidence and match.confidence_score > 0.6:
                        best_confidence = match.confidence_score
                        best_match = match
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å –≥–æ–ª–æ—Å–æ–º {voice_result.id}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if best_match and best_match.confidence_score > 0.7:
                await self._send_auto_match_notification(update, best_match)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _send_auto_match_notification(self, update: Update, match: ReceiptVoiceMatch) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            match: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            # –°–æ–∫—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            voice_text = match.voice_result.recognized_text
            if len(voice_text) > 100:
                voice_text = voice_text[:100] + "..."
            
            message = "üéØ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!**\n\n"
            message += f"üé§ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n_{voice_text}_\n\n"
            message += f"üßæ **–ß–µ–∫:** {match.ocr_result.shop_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'}\n"
            message += f"üí∞ **–°—É–º–º–∞ —á–µ–∫–∞:** {match.total_amount_receipt:,.0f} —Å—É–º\n"
            message += f"üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:** {match.confidence_score * 100:.0f}%\n"
            
            if match.matched_items_count > 0:
                message += f"üõçÔ∏è **–°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:** {match.matched_items_count}\n"
            
            if match.amount_match_percentage > 80:
                message += f"üíØ **–°—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç:** {match.amount_match_percentage:.0f}%\n"
            
            message += f"\n‚è∞ **–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏:** {match.time_difference_minutes} –º–∏–Ω"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏: {e}")

    def _get_command_suggestions(self, language: str = 'ru') -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        if language == 'ru':
            return [
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å —á–µ–∫ –µ—â–µ —Ä–∞–∑",
                "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ—Å–≤–µ—â–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–µ",
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏"
            ]
        elif language == 'uz':
            return [
                "Chekni yana suratga oling",
                "Yoritish yaxshi ekanligini tekshiring", 
                "Ovozli xabar jo'nating"
            ]
        else:
            return [
                "Try taking the receipt photo again",
                "Make sure lighting is good",
                "Send a voice message with purchase description"
            ]


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
photo_handler = PhotoMessageHandler() 