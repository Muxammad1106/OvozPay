"""
–ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import logging
import json
from typing import Dict, Any, Optional
from django.conf import settings
from asgiref.sync import sync_to_async

from ..models import TelegramUser, BotSession
from ..services.telegram_api_service import TelegramAPIService
from ..services.user_service import UserService
from ..services.transaction_service import TransactionService
from ..utils.translations import t

logger = logging.getLogger(__name__)


class BasicHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        self.user_service = UserService()
        self.transaction_service = TransactionService()
    
    async def handle_start_command(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —è–∑—ã–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            user_data = message.get('from', {})
            
            if not chat_id:
                logger.error("No chat_id in /start command")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_or_create_user(
                chat_id=chat_id,
                user_data=user_data
            )
            
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —è–∑—ã–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            if not user.language or user.language == 'ru':
                welcome_text = t.get_text('start_welcome', 'ru')
                choose_text = t.get_text('choose_language', 'ru')
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"{welcome_text}\n\n{choose_text}",
                    reply_markup=t.get_language_keyboard()
                )
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                welcome_text = t.get_text('start_welcome', user.language)
                menu_text = t.get_text('main_menu', user.language)
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"{welcome_text}\n\n{menu_text}",
                    reply_markup=t.get_main_menu_keyboard(user.language)
                )
            
            logger.info(f"Handled /start for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_start_command: {e}")
            await self._send_error_message(chat_id, 'ru')
    
    async def handle_help_command(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            
            help_title = t.get_text('help_title', language)
            help_commands = t.get_text('help_commands', language)
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"{help_title}\n{help_commands}"
            )
            
            logger.info(f"Handled /help for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_help_command: {e}")
            await self._send_error_message(chat_id, 'ru')
    
    async def handle_balance_command(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance"""
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                await self.handle_start_command(update)
                return
            
            language = user.language
            balance_title = t.get_text('balance_title', language)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            balance, stats = await self.transaction_service.get_user_balance(chat_id)
            
            balance_text = f"{balance_title}\n\nüí∞ *{balance:,.0f}* {user.preferred_currency}"
            
            if stats.get('transactions_count', 0) > 0:
                balance_text += f"\n\nüìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*"
                balance_text += f"\nüíö –î–æ—Ö–æ–¥—ã: {stats.get('total_income', 0):,.0f}"
                balance_text += f"\nüí∏ –†–∞—Å—Ö–æ–¥—ã: {stats.get('total_expense', 0):,.0f}"
                balance_text += f"\nüìù –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats.get('transactions_count', 0)}"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=balance_text,
                parse_mode='Markdown'
            )
            
            logger.info(f"Handled /balance for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_balance_command: {e}")
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            await self._send_error_message(chat_id, language)
    
    async def handle_menu_command(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu - –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                await self.handle_start_command(update)
                return
            
            language = user.language
            menu_text = t.get_text('main_menu', language)
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=menu_text,
                reply_markup=t.get_main_menu_keyboard(language)
            )
            
            logger.info(f"Handled /menu for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_menu_command: {e}")
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            await self._send_error_message(chat_id, language)

    async def handle_settings_command(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            
            if not chat_id:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                await self.handle_start_command(update)
                return
            
            language = user.language
            settings_title = t.get_text('settings_title', language)
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=settings_title,
                reply_markup=t.get_settings_keyboard(language)
            )
            
            logger.info(f"Handled /settings for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_settings_command: {e}")
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            await self._send_error_message(chat_id, language)
    
    async def handle_callback_query(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback queries - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboard –≤–º–µ—Å—Ç–æ InlineKeyboard"""
        try:
            callback_query = update.get('callback_query', {})
            
            # –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –µ—â—ë –≥–¥–µ-—Ç–æ –æ—Å—Ç–∞–ª–∏—Å—å
            await self.telegram_api.answer_callback_query(
                callback_query_id=callback_query.get('id', ''),
                text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∏–∂–µ üëá"
            )
            
        except Exception as e:
            logger.error(f"Error in handle_callback_query: {e}")
    
    async def handle_text_message(self, update: Dict[str, Any]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            text = message.get('text', '').strip()
            
            if not chat_id or not text:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                await self.handle_start_command(update)
                return
            
            logger.info(f"Processing text message from {chat_id}: '{text}'")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —è–∑—ã–∫–∞
            if text in ['üá∑üá∫ –†—É—Å—Å–∫–∏–π', 'üá∫üá∏ English', 'üá∫üáø O\'zbekcha']:
                await self._handle_language_button(chat_id, text, user)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤–∞–ª—é—Ç
            if any(currency in text for currency in ['üíµ', 'üí∂', 'üí¥', 'üí∑']):
                await self._handle_currency_button(chat_id, text, user)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
            language = user.language
            menu_buttons = {
                t.get_text('menu_balance', language): 'show_balance',
                t.get_text('menu_history', language): 'show_history',
                t.get_text('menu_categories', language): 'show_categories',
                t.get_text('menu_goals', language): 'show_goals',
                t.get_text('menu_debts', language): 'show_debts',
                t.get_text('menu_settings', language): 'show_settings',
                t.get_text('menu_help', language): 'show_help',
                t.get_text('back_button', language): 'back_to_menu'
            }
            
            if text in menu_buttons:
                await self._handle_menu_button(chat_id, menu_buttons[text], user)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            settings_buttons = {
                t.get_text('settings_language', language): 'set_language',
                t.get_text('settings_currency', language): 'set_currency',
                t.get_text('settings_phone', language): 'set_phone'
            }
            
            if text in settings_buttons:
                await self._handle_settings_button(chat_id, settings_buttons[text], user)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å emoji –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
            if any(emoji in text for emoji in ['üí∏', 'üí∞']):
                await self._show_category_details(chat_id, text, user)
                return
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            if await self._try_parse_transaction_text(chat_id, text, user):
                return
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if await self._try_parse_management_command(chat_id, text, user):
                return
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=t.get_text('invalid_command', language)
            )
            
        except Exception as e:
            logger.error(f"Error in handle_text_message: {e}")
            user = await self.user_service.get_user_by_chat_id(chat_id) if chat_id else None
            language = user.language if user else 'ru'
            await self._send_error_message(chat_id, language)

    async def _handle_language_button(self, chat_id: int, text: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞"""
        language_map = {
            'üá∑üá∫ –†—É—Å—Å–∫–∏–π': 'ru',
            'üá∫üá∏ English': 'en',
            'üá∫üáø O\'zbekcha': 'uz'
        }
        
        new_language = language_map.get(text)
        if new_language:
            await self._handle_language_selection(chat_id, f'lang_{new_language}', user)

    async def _handle_currency_button(self, chat_id: int, text: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤–∞–ª—é—Ç—ã"""
        currency_map = {
            'üíµ': 'usd',
            'üí∂': 'eur', 
            'üí¥': 'uzs',
            'üí∑': 'rub'
        }
        
        for symbol, currency in currency_map.items():
            if symbol in text:
                await self._handle_currency_selection(chat_id, f'curr_{currency}', user)
                break

    async def _handle_menu_button(self, chat_id: int, action: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        if action == 'show_balance':
            await self._show_balance(chat_id, user)
        elif action == 'show_history':
            await self._show_history(chat_id, user)
        elif action == 'show_categories':
            await self._show_categories(chat_id, user)
        elif action == 'show_goals':
            await self._show_goals(chat_id, user)
        elif action == 'show_debts':
            await self._show_debts(chat_id, user)
        elif action == 'show_settings':
            await self._show_settings_menu(chat_id, user)
        elif action == 'show_help':
            await self._show_help_menu(chat_id, user)
        elif action == 'back_to_menu':
            await self._show_main_menu(chat_id, user)

    async def _handle_settings_button(self, chat_id: int, action: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if action == 'set_language':
            await self._show_language_settings(chat_id, user)
        elif action == 'set_currency':
            await self._show_currency_settings(chat_id, user)
        elif action == 'set_phone':
            await self._show_phone_settings(chat_id, user)

    async def _try_parse_transaction_text(self, chat_id: int, text: str, user: TelegramUser) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        try:
            logger.info(f"Attempting to parse text: '{text}' for user {chat_id} (language: {user.language})")
            
            from ..services.text_parser_service import TextParserService
            
            parser = TextParserService()
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
            parsed_data = await parser.parse_transaction_text(
                text, 
                user.language, 
                user.preferred_currency
            )
            
            logger.info(f"Parser result: {parsed_data}")
            
            if parsed_data:
                # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                logger.info(f"Creating transaction from parsed data: {parsed_data}")
                transaction = await self.transaction_service.create_transaction_from_text(
                    chat_id, parsed_data
                )
                
                if transaction:
                    logger.info(f"Transaction created successfully: {transaction.id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
                    await self._send_text_transaction_confirmation(
                        chat_id, transaction, parsed_data, user.language
                    )
                    return True
                else:
                    logger.error("Failed to create transaction from text")
            else:
                logger.warning(f"No transaction data found in text: '{text}'")
            
            return False
            
        except Exception as e:
            logger.error(f"Error parsing transaction text: {e}", exc_info=True)
            return False

    async def _try_parse_management_command(self, chat_id: int, text: str, user: TelegramUser) -> bool:
        """–ü—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            logger.info(f"Checking for management command: '{text}' for user {chat_id}")
            
            from ..services.text_parser_service import TextParserService
            
            parser = TextParserService()
            management_data = parser.parse_management_command(text, user.language)
            
            if management_data:
                logger.info(f"Management command detected: {management_data}")
                
                if management_data['type'] == 'change_language':
                    await self._handle_voice_language_change(chat_id, management_data['target_language'], user)
                    return True
                
                elif management_data['type'] == 'change_currency':
                    await self._handle_voice_currency_change(chat_id, management_data['target_currency'], user)
                    return True
                
                elif management_data['type'] == 'create_category':
                    await self._handle_voice_category_creation(chat_id, management_data['category_name'], user)
                    return True
                
                elif management_data['type'] == 'delete_category':
                    await self._handle_voice_category_deletion(chat_id, management_data['category_name'], user)
                    return True
                
                elif management_data['type'] == 'delete_transaction':
                    await self._handle_voice_transaction_deletion(chat_id, management_data['target'], user)
                    return True
            
            return False
            
        except Exception as e:
            logger.error(f"Error parsing management command: {e}", exc_info=True)
            return False

    async def _handle_voice_language_change(self, chat_id: int, target_language: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫
            await self.user_service.update_user_language(chat_id, target_language)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
            confirmations = {
                'ru': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
                'en': '‚úÖ Language changed to English', 
                'uz': '‚úÖ Til o\'zbekchaga o\'zgartirildi'
            }
            
            confirmation = confirmations.get(target_language, confirmations['ru'])
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=confirmation
            )
            
            logger.info(f"Language changed via voice command to {target_language} for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error handling voice language change: {e}")

    async def _handle_voice_currency_change(self, chat_id: int, target_currency: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç—ã"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
            await self.user_service.update_user_currency(chat_id, target_currency)
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–ª—é—Ç—ã
            currency_names = {
                'USD': {'ru': '–¥–æ–ª–ª–∞—Ä—ã –°–®–ê', 'en': 'US Dollars', 'uz': 'AQSH dollarlari'},
                'EUR': {'ru': '–µ–≤—Ä–æ', 'en': 'Euro', 'uz': 'Evro'},
                'RUB': {'ru': '—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏', 'en': 'Russian Rubles', 'uz': 'Rossiya rublari'},
                'UZS': {'ru': '—É–∑–±–µ–∫—Å–∫–∏–µ —Å—É–º—ã', 'en': 'Uzbek Som', 'uz': 'O\'zbek so\'mi'}
            }
            
            currency_name = currency_names.get(target_currency, {}).get(user.language, target_currency)
            
            confirmations = {
                'ru': f'‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {currency_name}',
                'en': f'‚úÖ Currency changed to {currency_name}',
                'uz': f'‚úÖ Valyuta {currency_name}ga o\'zgartirildi'
            }
            
            confirmation = confirmations.get(user.language, confirmations['ru'])
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=confirmation
            )
            
            logger.info(f"Currency changed via voice command to {target_currency} for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error handling voice currency change: {e}")

    async def _handle_voice_category_creation(self, chat_id: int, category_name: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user = await self._get_or_create_django_user(user)
            
            # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_created = await self._create_custom_category(django_user, category_name)
            
            if category_created:
                success_text = t.get_text('category_created', user.language)
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ {success_text}: **{category_name}**",
                    parse_mode='Markdown'
                )
                logger.info(f"Category '{category_name}' created via voice command for user {chat_id}")
            else:
                error_text = t.get_text('category_exists', user.language)
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {error_text}: **{category_name}**",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error handling voice category creation: {e}")
            error_text = t.get_text('processing_failed', user.language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"‚ùå {error_text}"
            )

    async def _handle_voice_category_deletion(self, chat_id: int, category_name: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user = await self._get_or_create_django_user(user)
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_deleted = await self._delete_user_category(django_user, category_name)
            
            if category_deleted:
                success_text = t.get_text('category_deleted', user.language) if hasattr(t, 'category_deleted') else '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞'
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ {success_text}: **{category_name}**",
                    parse_mode='Markdown'
                )
                logger.info(f"Category '{category_name}' deleted via voice command for user {chat_id}")
            else:
                error_text = t.get_text('category_not_found', user.language) if hasattr(t, 'category_not_found') else '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {error_text}: **{category_name}**",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error handling voice category deletion: {e}")
            error_text = t.get_text('processing_failed', user.language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"‚ùå {error_text}"
            )

    async def _handle_voice_transaction_deletion(self, chat_id: int, target: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user = await self._get_or_create_django_user(user)
            
            # –ò—â–µ–º –∏ —É–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction_deleted = await self._delete_user_transaction(django_user, target)
            
            if transaction_deleted:
                success_text = t.get_text('transaction_deleted', user.language) if hasattr(t, 'transaction_deleted') else '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞'
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚úÖ {success_text}: **{target}**",
                    parse_mode='Markdown'
                )
                logger.info(f"Transaction '{target}' deleted via voice command for user {chat_id}")
            else:
                error_text = t.get_text('transaction_not_found', user.language) if hasattr(t, 'transaction_not_found') else '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=f"‚ö†Ô∏è {error_text}: **{target}**",
                    parse_mode='Markdown'
                )
                
        except Exception as e:
            logger.error(f"Error handling voice transaction deletion: {e}")
            error_text = t.get_text('processing_failed', user.language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"‚ùå {error_text}"
            )

    async def _get_or_create_django_user(self, telegram_user):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç Django User"""
        try:
            from asgiref.sync import sync_to_async
            from apps.users.models import User
            
            @sync_to_async
            def get_user():
                if telegram_user.phone_number:
                    user, created = User.objects.get_or_create(
                        phone_number=telegram_user.phone_number,
                        defaults={
                            'first_name': telegram_user.first_name,
                            'last_name': telegram_user.last_name,
                            'username': telegram_user.username,
                        }
                    )
                else:
                    user, created = User.objects.get_or_create(
                        username=telegram_user.username or f"tg_{telegram_user.telegram_user_id}",
                        defaults={
                            'first_name': telegram_user.first_name,
                            'last_name': telegram_user.last_name,
                            'phone_number': telegram_user.phone_number or '',
                        }
                    )
                return user
            
            return await get_user()
            
        except Exception as e:
            logger.error(f"Error getting Django user: {e}")
            return None

    async def _create_custom_category(self, user, category_name: str):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            from apps.categories.models import Category
            
            @sync_to_async
            def create_category():
                # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                normalized_name = category_name.strip().title()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º get_or_create –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                # –ò—â–µ–º –ø–æ –ª—é–±–æ–º—É —Ç–∏–ø—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å, –Ω–µ —Å–æ–∑–¥–∞–µ–º
                existing = Category.objects.filter(
                    user=user,
                    name__iexact=normalized_name
                ).first()
                
                if existing:
                    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{normalized_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    return None
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
                category, created = Category.objects.get_or_create(
                    user=user,
                    name=normalized_name,
                    type='expense',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤
                    defaults={
                        'is_default': False
                    }
                )
                
                if created:
                    logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
                    return category
                else:
                    logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category.name}")
                    return None
            
            return await create_category()
            
        except Exception as e:
            logger.error(f"Error creating custom category: {e}")
            return None

    async def _delete_user_category(self, user, category_name: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é"""
        try:
            from apps.categories.models import Category
            
            @sync_to_async
            def delete_category():
                # –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ, –Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
                category = Category.objects.filter(
                    user=user,
                    name__iexact=category_name,
                    is_custom=True  # –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                ).first()
                
                if category:
                    category.delete()
                    return True
                return False
            
            return await delete_category()
            
        except Exception as e:
            logger.error(f"Error deleting category: {e}")
            return False

    async def _delete_user_transaction(self, user, target: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–ª–∏ ID"""
        try:
            from apps.transactions.models import Transaction
            
            @sync_to_async
            def delete_transaction():
                # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è)
                transaction = Transaction.objects.filter(
                    user=user,
                    description__icontains=target
                ).order_by('-created_at').first()
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ ID
                if not transaction and target.isdigit():
                    try:
                        transaction = Transaction.objects.filter(
                            user=user,
                            id=target
                        ).first()
                    except:
                        pass
                
                if transaction:
                    transaction.delete()
                    return True
                return False
            
            return await delete_transaction()
            
        except Exception as e:
            logger.error(f"Error deleting transaction: {e}")
            return False

    async def _send_text_transaction_confirmation(
        self, 
        chat_id: int, 
        transaction, 
        parsed_data: Dict[str, Any], 
        language: str
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
        try:
            transaction_type = 'üí∞ –î–æ—Ö–æ–¥' if transaction.type == 'income' else 'üí∏ –†–∞—Å—Ö–æ–¥'
            final_amount = f"{transaction.amount:,.0f} {transaction.category.user.telegramuser_set.first().preferred_currency if transaction.category and transaction.category.user and transaction.category.user.telegramuser_set.exists() else 'UZS'}"
            
            if transaction.category:
                category_text = transaction.category.name
            else:
                category_text = parsed_data.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            
            # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_text = f"{transaction_type}\nüí∞ –°—É–º–º–∞: **{final_amount}**\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_text}**"
            
            if transaction.description:
                confirmation_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: **{transaction.description}**"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –±—ã–ª–∞
            if parsed_data.get('original_currency') and parsed_data.get('original_amount'):
                original_currency = parsed_data['original_currency']
                original_amount = parsed_data['original_amount']
                current_currency = parsed_data['currency']
                
                if original_currency != current_currency:
                    confirmation_text += f"\n\nüí± **–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ:**\n{original_amount} {original_currency} ‚Üí {transaction.amount:,.2f} {current_currency}"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"üìù **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞:**\n\n{confirmation_text}",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error sending text transaction confirmation: {e}")
    
    async def _handle_language_selection(self, chat_id: int, callback_data: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
        language_map = {
            'lang_ru': 'ru',
            'lang_en': 'en', 
            'lang_uz': 'uz'
        }
        
        new_language = language_map.get(callback_data)
        if not new_language:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.update_user_language(chat_id, new_language)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
        confirmation_text = t.get_text('language_set', new_language)
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=confirmation_text
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤–æ–º —è–∑—ã–∫–µ
        welcome_text = t.get_text('start_welcome', new_language)
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=welcome_text
        )
        
        logger.info(f"Language set to {new_language} for user {chat_id}")
    
    async def _handle_currency_selection(self, chat_id: int, callback_data: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
        currency_map = {
            'curr_usd': 'USD',
            'curr_eur': 'EUR',
            'curr_uzs': 'UZS',
            'curr_rub': 'RUB'
        }
        
        new_currency = currency_map.get(callback_data)
        if not new_currency:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await self.user_service.update_user_currency(chat_id, new_currency)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        language = user.language
        currency_name = t.get_text(new_currency.lower(), language)
        confirmation_text = t.get_text('currency_set', language).format(currency_name)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=confirmation_text
        )
        
        logger.info(f"Currency set to {new_currency} for user {chat_id}")
    
    async def _show_language_settings(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞"""
        language = user.language
        choose_text = t.get_text('choose_language', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=choose_text,
            reply_markup=t.get_language_keyboard()
        )
    
    async def _show_currency_settings(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞–ª—é—Ç—ã"""
        language = user.language
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=t.get_text('settings_currency', language),
            reply_markup=t.get_currency_keyboard(language)
        )
    
    async def _show_phone_settings(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        language = user.language
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞
        await self.user_service.set_user_state(chat_id, 'waiting_phone')
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä
        phone_text = t.get_text('phone_request', language)
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=phone_text
        )
    
    async def _handle_phone_input(self, chat_id: int, phone: str, user: TelegramUser) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        language = user.language
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        if len(phone) >= 9 and (phone.startswith('+') or phone.startswith('998') or phone.isdigit()):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä
            await self.user_service.update_user_phone(chat_id, phone)
            
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è
            await self.user_service.set_user_state(chat_id, None)
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            confirmation_text = t.get_text('phone_set', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=confirmation_text
            )
        else:
            # –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            error_text = t.get_text('phone_request', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=f"‚ùå {error_text}"
            )
    
    async def _show_main_menu(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        language = user.language
        menu_text = t.get_text('main_menu', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=menu_text,
            reply_markup=t.get_main_menu_keyboard(language)
        )

    async def _show_balance(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        language = user.language
        balance_title = t.get_text('balance_title', language)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        balance, stats = await self.transaction_service.get_user_balance(chat_id)
        
        balance_text = f"{balance_title}\n\nüí∞ *{balance:,.0f}* {user.preferred_currency}"
        
        if stats.get('transactions_count', 0) > 0:
            balance_text += f"\n\nüìä *{t.get_text('statistics', language)}*"
            balance_text += f"\nüíö {t.get_text('income', language)}: {stats.get('total_income', 0):,.0f}"
            balance_text += f"\nüí∏ {t.get_text('expense', language)}: {stats.get('total_expense', 0):,.0f}"
            balance_text += f"\nüìù {t.get_text('transactions', language)}: {stats.get('transactions_count', 0)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        back_keyboard = {
            'inline_keyboard': [
                [{'text': t.get_text('back_button', language), 'callback_data': 'back_to_menu'}]
            ]
        }
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=balance_text,
            parse_mode='Markdown',
            reply_markup=back_keyboard
        )

    async def _show_history(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        language = user.language
        feature_text = t.get_text('feature_not_implemented', language)
        
        back_keyboard = {
            'inline_keyboard': [
                [{'text': t.get_text('back_button', language), 'callback_data': 'back_to_menu'}]
            ]
        }
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=f"üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n{feature_text}",
            reply_markup=back_keyboard
        )

    async def _show_categories(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        language = user.language
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user = await self._get_or_create_django_user(user)
            
            if not django_user:
                back_keyboard = {
                    'inline_keyboard': [
                        [{'text': t.get_text('back_button', language), 'callback_data': 'back_to_menu'}]
                    ]
                }
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
                    reply_markup=back_keyboard
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            categories = await self._get_user_categories(django_user)
            
            back_keyboard = {
                'inline_keyboard': [
                    [{'text': t.get_text('back_button', language), 'callback_data': 'back_to_menu'}]
                ]
            }
            
            if not categories:
                no_categories_text = f"üìÇ **{t.get_text('menu_categories', language)}**\n\n{t.get_text('no_categories', language)}\n\nüí° {t.get_text('create_category_hint', language)}"
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=no_categories_text,
                    parse_mode='Markdown',
                    reply_markup=back_keyboard
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories_keyboard = await self._create_categories_keyboard(categories, language)
            
            categories_text = f"üìÇ **{t.get_text('categories_title', language)}**\n\nüí° {t.get_text('create_category_hint', language)}"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=categories_text,
                parse_mode='Markdown',
                reply_markup=categories_keyboard
            )
            
        except Exception as e:
            logger.error(f"Error showing categories: {e}")
            back_keyboard = {
                'inline_keyboard': [
                    [{'text': t.get_text('back_button', language), 'callback_data': 'back_to_menu'}]
                ]
            }
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=t.get_text('error_occurred', language),
                reply_markup=back_keyboard
            )

    async def _get_user_categories(self, user):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from asgiref.sync import sync_to_async
            from apps.categories.models import Category
            
            @sync_to_async
            def get_categories():
                return list(Category.objects.filter(user=user).order_by('name'))
            
            return await get_categories()
            
        except Exception as e:
            logger.error(f"Error getting user categories: {e}")
            return []

    async def _create_categories_keyboard(self, categories, language: str):
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (ReplyKeyboard)"""
        try:
            if not categories:
                return t.get_main_menu_keyboard(language)
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ 2 –≤ —Ä—è–¥
            keyboard_rows = []
            temp_row = []
            
            for category in categories:
                emoji = 'üí∏' if category.type == 'expense' else 'üí∞'
                button_text = f"{emoji} {category.name}"
                temp_row.append(button_text)
                
                if len(temp_row) == 2:
                    keyboard_rows.append(temp_row)
                    temp_row = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –∫–Ω–æ–ø–∫—É
            if temp_row:
                keyboard_rows.append(temp_row)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard_rows.append([t.get_text('back_button', language)])
            
            return {
                'keyboard': keyboard_rows,
                'resize_keyboard': True
            }
            
        except Exception as e:
            logger.error(f"Error creating categories keyboard: {e}")
            return t.get_main_menu_keyboard(language)

    async def _show_category_details(self, chat_id: int, category_name: str, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –µ—ë —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)"""
        language = user.language
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º Django –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            django_user = await self._get_or_create_django_user(user)
            if not django_user:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            category, transactions = await self._get_category_by_name(django_user, category_name)
            
            if not category:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text="‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            emoji = 'üí∏' if category.type == 'expense' else 'üí∞'
            
            if not transactions:
                no_transactions_texts = {
                    'ru': f"üìÇ **{category.name}** {emoji}\n\n–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\nüí° –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π:\n\"–ø–æ—Ç—Ä–∞—Ç–∏–ª 5000 —Å—É–º –Ω–∞ {category.name.lower()}\"",
                    'en': f"üìÇ **{category.name}** {emoji}\n\nNo transactions in this category yet\n\nüí° Create first transaction with command:\n\"spent 50 dollars on {category.name.lower()}\"",
                    'uz': f"üìÇ **{category.name}** {emoji}\n\nBu kategoriyada hali tranzaksiyalar yo'q\n\nüí° Birinchi tranzaksiya yarating:\n\"5000 so'm {category.name.lower()}ga sarfladim\""
                }
                
                text = no_transactions_texts.get(language, no_transactions_texts['ru'])
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=text,
                    parse_mode='Markdown',
                    reply_markup=t.get_main_menu_keyboard(language)
                )
                return
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_amount = sum(t.amount for t in transactions)
            transactions_count = len(transactions)
            
            text = f"üìÇ **{category.name}** {emoji}\n\n"
            text += f"üí∞ –í—Å–µ–≥–æ: {total_amount:,.0f} {user.preferred_currency}\n"
            text += f"üìù {t.get_text('transactions', language)}: {transactions_count}\n\n"
            text += f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:**\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for transaction in transactions[:5]:
                date_str = transaction.created_at.strftime('%d.%m.%Y')
                text += f"‚Ä¢ {date_str}: {transaction.amount:,.0f} {user.preferred_currency}"
                if transaction.description:
                    text += f" - {transaction.description}"
                text += "\n"
            
            if len(transactions) > 5:
                text += f"\n... –∏ –µ—â—ë {len(transactions) - 5} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode='Markdown',
                reply_markup=t.get_main_menu_keyboard(language)
            )
            
        except Exception as e:
            logger.error(f"Error showing category details: {e}")
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=t.get_text('error_occurred', language)
            )

    async def _get_category_by_name(self, user, category_name: str):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –µ—ë —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            from asgiref.sync import sync_to_async
            from apps.categories.models import Category
            from apps.transactions.models import Transaction
            
            # –£–±–∏—Ä–∞–µ–º emoji –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
            clean_name = category_name
            for emoji in ['üí∏', 'üí∞', 'üìÇ']:
                clean_name = clean_name.replace(emoji, '').strip()
            
            @sync_to_async
            def get_data():
                try:
                    category = Category.objects.filter(
                        user=user, 
                        name__icontains=clean_name
                    ).first()
                    
                    if category:
                        transactions = list(Transaction.objects.filter(
                            user=user, 
                            category=category
                        ).order_by('-created_at'))
                        return category, transactions
                    
                    return None, []
                except Exception as e:
                    logger.error(f"Error in get_data: {e}")
                    return None, []
            
            return await get_data()
            
        except Exception as e:
            logger.error(f"Error getting category by name: {e}")
            return None, []

    async def _show_goals(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏"""
        language = user.language
        feature_text = t.get_text('feature_not_implemented', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=f"üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏\n\n{feature_text}",
            reply_markup=t.get_main_menu_keyboard(language)
        )

    async def _show_debts(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏"""
        language = user.language
        feature_text = t.get_text('feature_not_implemented', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=f"üí∏ –î–æ–ª–≥–∏\n\n{feature_text}",
            reply_markup=t.get_main_menu_keyboard(language)
        )

    async def _show_settings_menu(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        language = user.language
        settings_title = t.get_text('settings_title', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=settings_title,
            reply_markup=t.get_settings_keyboard(language)
        )

    async def _show_help_menu(self, chat_id: int, user: TelegramUser) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        language = user.language
        help_title = t.get_text('help_title', language)
        help_commands = t.get_text('help_commands', language)
        
        await self.telegram_api.send_message(
            chat_id=chat_id,
            text=f"{help_title}\n{help_commands}",
            reply_markup=t.get_main_menu_keyboard(language)
        )

    async def _send_error_message(self, chat_id: int, language: str = 'ru') -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            error_text = t.get_text('error_occurred', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=error_text
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}") 