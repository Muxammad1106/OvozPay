"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import logging
import os
import tempfile
from typing import Dict, Any, Optional
from django.conf import settings

from ..models import TelegramUser, VoiceCommand
from ..services.telegram_api_service import TelegramAPIService
from ..services.user_service import UserService
from ..services.transaction_service import TransactionService
from ..services.voice_parser_service import VoiceParserService
from ..utils.translations import t
from services.ai.voice_recognition.whisper_service import WhisperService

logger = logging.getLogger(__name__)


class VoiceHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞"""
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        self.user_service = UserService()
        self.transaction_service = TransactionService()
        self.voice_parser = VoiceParserService()
        self.whisper_service = WhisperService()
    
    async def handle_voice_message(self, update: Dict[str, Any]) -> None:
        """
        –ü–æ–ª–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∏ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        Args:
            update: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram —Å –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        """
        chat_id = None
        voice_log = None
        
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            voice = message.get('voice', {})
            
            if not chat_id or not voice:
                logger.error("Invalid voice message format")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                logger.error(f"User not found for chat_id: {chat_id}")
                return
            
            language = user.language
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ
            voice_log = await VoiceCommand.objects.acreate(
                user=user,
                telegram_file_id=voice.get('file_id', ''),
                duration_seconds=voice.get('duration', 0),
                status='processing'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_text = t.get_text('voice_processing', language)
            processing_message = await self.telegram_api.send_message(
                chat_id=chat_id,
                text=processing_text
            )
            processing_message_id = processing_message.get('message_id') if processing_message else None
            
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            audio_file_path = await self._download_voice_file(voice.get('file_id'), chat_id)
            if not audio_file_path:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ —Ñ–∞–π–ª")
            
            try:
                # 2. –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Whisper
                transcription_result = await self.whisper_service.transcribe_audio(
                    audio_file_path, 
                    language=language
                )
                
                if not transcription_result or not transcription_result.get('text'):
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
                
                transcription = transcription_result['text']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                voice_log.transcription = transcription
                await voice_log.asave()
                
                logger.info(f"Transcribed: '{transcription}' for user {chat_id}")
                
                # 3. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                from ..services.text_parser_service import TextParserService
                text_parser = TextParserService()
                management_data = text_parser.parse_management_command(transcription, language)
                
                if management_data:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    voice_log.status = 'success'
                    voice_log.command_type = management_data['type']
                    await voice_log.asave()
                    
                    success = await self._handle_voice_management_command(
                        chat_id, management_data, user, processing_message_id
                    )
                    
                    if success:
                        return
                
                # 4. –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - –ø–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                parsed_data = self.voice_parser.parse_voice_text(transcription, language)
                
                if not parsed_data:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é - –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
                    voice_log.status = 'success'
                    voice_log.command_type = 'unknown'
                    await voice_log.asave()
                    
                    no_transaction_text = t.get_text('voice_no_transaction', language)
                    final_text = f"{no_transaction_text}\n\nüìù *–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:* {transcription}"
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if processing_message_id:
                        await self.telegram_api.edit_message_text(
                            chat_id=chat_id,
                            message_id=processing_message_id,
                            text=final_text,
                            parse_mode='Markdown'
                        )
                    else:
                        await self.telegram_api.send_message(
                            chat_id=chat_id,
                            text=final_text,
                            parse_mode='Markdown'
                        )
                    return
                
                # 4. –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                transaction = await self.transaction_service.create_transaction_from_voice(
                    chat_id, parsed_data
                )
                
                if transaction:
                    # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
                    voice_log.status = 'success'
                    voice_log.command_type = parsed_data['type']
                    voice_log.extracted_amount = parsed_data['amount']
                    voice_log.created_transaction_id = transaction.id
                    await voice_log.asave()
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                    await self._send_transaction_confirmation(
                        chat_id, transaction, parsed_data, language, processing_message_id
                    )
                    
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if audio_file_path and os.path.exists(audio_file_path):
                    os.unlink(audio_file_path)
            
            logger.info(f"Successfully processed voice message for user {chat_id}")
            
        except Exception as e:
            logger.error(f"Error in handle_voice_message: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            if voice_log:
                voice_log.status = 'failed'
                voice_log.error_message = str(e)
                await voice_log.asave()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            if chat_id:
                user = await self.user_service.get_user_by_chat_id(chat_id)
                language = user.language if user else 'ru'
                await self._send_error_message(chat_id, language)
    
    async def _download_voice_file(self, file_id: str, chat_id: int) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.telegram_api.get_file_info(file_id)
            if not file_info:
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_content = await self.telegram_api.download_file(file_info['file_path'])
            if not file_content:
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_file.write(file_content)
                return temp_file.name
                
        except Exception as e:
            logger.error(f"Error downloading voice file: {e}")
            return None
    
    async def _send_transaction_confirmation(
        self, 
        chat_id: int, 
        transaction, 
        parsed_data: Dict[str, Any], 
        language: str,
        processing_message_id: Optional[int] = None
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            transaction_type = 'üí∞ –î–æ—Ö–æ–¥' if transaction.type == 'income' else 'üí∏ –†–∞—Å—Ö–æ–¥'
            amount_text = f"{transaction.amount:,.0f}"
            
            if transaction.category:
                category_text = transaction.category.name
            else:
                category_text = parsed_data.get('category', '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
            
            confirmation_text = t.get_text('voice_transaction_created', language).format(
                type=transaction_type,
                amount=amount_text,
                category=category_text,
                description=transaction.description or ''
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            if processing_message_id:
                await self.telegram_api.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message_id,
                    text=confirmation_text,
                    parse_mode='Markdown'
                )
            else:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=confirmation_text,
                    parse_mode='Markdown'
                )
            
        except Exception as e:
            logger.error(f"Error sending transaction confirmation: {e}")

    async def _handle_voice_management_command(
        self, 
        chat_id: int, 
        management_data: Dict[str, Any], 
        user: TelegramUser,
        processing_message_id: Optional[int] = None
    ) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        try:
            command_type = management_data['type']
            language = user.language
            
            if command_type == 'change_language':
                target_language = management_data['target_language']
                await self.user_service.update_user_language(chat_id, target_language)
                
                confirmations = {
                    'ru': '‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π',
                    'en': '‚úÖ Language changed to English', 
                    'uz': '‚úÖ Til o\'zbekchaga o\'zgartirildi'
                }
                
                confirmation = confirmations.get(target_language, confirmations['ru'])
                
            elif command_type == 'change_currency':
                target_currency = management_data['target_currency']
                await self.user_service.update_user_currency(chat_id, target_currency)
                
                currency_names = {
                    'USD': {'ru': '–¥–æ–ª–ª–∞—Ä—ã –°–®–ê', 'en': 'US Dollars', 'uz': 'AQSH dollarlari'},
                    'EUR': {'ru': '–µ–≤—Ä–æ', 'en': 'Euro', 'uz': 'Evro'},
                    'RUB': {'ru': '—Ä–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä—É–±–ª–∏', 'en': 'Russian Rubles', 'uz': 'Rossiya rublari'},
                    'UZS': {'ru': '—É–∑–±–µ–∫—Å–∫–∏–µ —Å—É–º—ã', 'en': 'Uzbek Som', 'uz': 'O\'zbek so\'mi'}
                }
                
                currency_name = currency_names.get(target_currency, {}).get(language, target_currency)
                
                confirmation = t.get_text('currency_changed', language).format(currency=currency_name)
                
            elif command_type == 'create_category':
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ basic_handlers
                from .basic_handlers import BasicHandlers
                basic_handler = BasicHandlers()
                
                await basic_handler._handle_voice_category_creation(
                    chat_id, management_data['category_name'], user
                )
                return True
                
            elif command_type == 'delete_category':
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ basic_handlers
                from .basic_handlers import BasicHandlers
                basic_handler = BasicHandlers()
                
                await basic_handler._handle_voice_category_deletion(
                    chat_id, management_data['category_name'], user
                )
                return True
                
            elif command_type == 'delete_transaction':
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑ basic_handlers
                from .basic_handlers import BasicHandlers
                basic_handler = BasicHandlers()
                
                await basic_handler._handle_voice_transaction_deletion(
                    chat_id, management_data['target'], user
                )
                return True
            
            else:
                return False
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–ª—è –∫–æ–º–∞–Ω–¥ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞/–≤–∞–ª—é—Ç—ã)
            if processing_message_id:
                await self.telegram_api.edit_message_text(
                    chat_id=chat_id,
                    message_id=processing_message_id,
                    text=confirmation,
                    parse_mode='Markdown'
                )
            else:
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=confirmation,
                    parse_mode='Markdown'
                )
                
            return True
            
        except Exception as e:
            logger.error(f"Error handling voice management command: {e}")
            return False
    
    async def _send_error_message(self, chat_id: int, language: str = 'ru') -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            language: –Ø–∑—ã–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            error_text = t.get_text('voice_error', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=error_text
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}") 