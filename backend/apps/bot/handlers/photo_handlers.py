"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —á–µ–∫–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
"""

import logging
import os
import tempfile
from typing import Dict, Any, Optional, List
from django.conf import settings

from ..models import PhotoReceipt
from ..services.telegram_api_service import TelegramAPIService
from ..services.user_service import UserService
from ..utils.translations import t
from services.ai_service_manager import AIServiceManager

logger = logging.getLogger(__name__)


class PhotoHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —á–µ–∫–æ–≤"""
    
    def __init__(self):
        self.telegram_api = TelegramAPIService()
        self.user_service = UserService()
        self.ai_manager = AIServiceManager()
    
    async def handle_photo_message(self, update: Dict[str, Any]) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (—á–µ–∫–æ–≤)
        """
        try:
            message = update.get('message', {})
            chat_id = message.get('chat', {}).get('id')
            photo = message.get('photo', [])
            
            if not chat_id or not photo:
                logger.error("No chat_id or photo in photo message")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —è–∑—ã–∫
            user = await self.user_service.get_user_by_chat_id(chat_id)
            if not user:
                logger.error(f"User not found for chat_id {chat_id}")
                return
            
            language = user.language
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_text = t.get_text('photo_processing', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=processing_text
            )
            
            # –ë–µ—Ä—ë–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
            best_photo = photo[-1]
            file_id = best_photo.get('file_id', '')
            
            # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
            photo_receipt = await self._create_photo_receipt_record(
                user=user,
                file_id=file_id,
                file_size=best_photo.get('file_size', 0)
            )
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ
            image_file_path = await self._download_photo_file(file_id)
            if not image_file_path:
                await self._handle_photo_error(chat_id, photo_receipt, language, "Failed to download photo")
                return
            
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é OCR
                extracted_text = await self._extract_text_from_image(image_file_path)
                if not extracted_text:
                    await self._handle_photo_error(chat_id, photo_receipt, language, "OCR failed")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                await self._update_photo_receipt(photo_receipt, extracted_text=extracted_text)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
                if len(extracted_text) <= 300:
                    extracted_text_msg = t.get_text('photo_text_extracted', language, extracted_text)
                    await self.telegram_api.send_message(
                        chat_id=chat_id,
                        text=extracted_text_msg
                    )
                
                # –ü–∞—Ä—Å–∏–º —á–µ–∫ –∏ —Å–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                receipt_data = await self._parse_receipt_data(extracted_text, language)
                if receipt_data and receipt_data.get('items'):
                    await self._create_transactions_from_receipt(
                        chat_id, photo_receipt, receipt_data, user, language
                    )
                else:
                    # –ß–µ–∫ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
                    await self._handle_unrecognized_receipt(chat_id, extracted_text, language)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(image_file_path):
                    os.remove(image_file_path)
            
        except Exception as e:
            logger.error(f"Error in handle_photo_message: {e}")
            user = await self.user_service.get_user_by_chat_id(chat_id)
            language = user.language if user else 'ru'
            await self._send_photo_error(chat_id, language)
    
    async def _create_photo_receipt_record(self, user, file_id: str, file_size: int) -> PhotoReceipt:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ –ë–î"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def create_record():
            return PhotoReceipt.objects.create(
                user=user,
                telegram_file_id=file_id,
                file_size_bytes=file_size,
                status='processing'
            )
        
        return await create_record()
    
    async def _update_photo_receipt(self, photo_receipt: PhotoReceipt, **kwargs) -> None:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def update_record():
            for key, value in kwargs.items():
                setattr(photo_receipt, key, value)
            photo_receipt.save()
        
        await update_record()
    
    async def _download_photo_file(self, file_id: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç Telegram"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.telegram_api.get_file(file_id)
            if not file_info or 'file_path' not in file_info:
                return None
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file_content = await self.telegram_api.download_file(file_info['file_path'])
            if not file_content:
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                temp_file.write(file_content)
                return temp_file.name
            
        except Exception as e:
            logger.error(f"Error downloading photo file {file_id}: {e}")
            return None
    
    async def _extract_text_from_image(self, image_file_path: str) -> Optional[str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OCR"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º EasyOCR —Å–µ—Ä–≤–∏—Å
            result = await self.ai_manager.ocr_service.extract_text_from_image(
                image_path=image_file_path
            )
            
            if result and result.get('text'):
                return result['text'].strip()
            
            return None
            
        except Exception as e:
            logger.error(f"Error extracting text from image: {e}")
            return None
    
    async def _parse_receipt_data(self, text: str, language: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞ —á–µ—Ä–µ–∑ NLP"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º NLP —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ–∫–∞
            result = await self.ai_manager.nlp_service.parse_receipt(
                text=text,
                language=language
            )
            
            return result
            
        except Exception as e:
            logger.error(f"Error parsing receipt data: {e}")
            return None
    
    async def _create_transactions_from_receipt(
        self, 
        chat_id: int, 
        photo_receipt: PhotoReceipt, 
        receipt_data: Dict[str, Any],
        user,
        language: str
    ) -> None:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –¥–∞–Ω–Ω—ã—Ö —á–µ–∫–∞"""
        try:
            items = receipt_data.get('items', [])
            total_amount = receipt_data.get('total_amount', 0)
            currency = receipt_data.get('currency', user.preferred_currency)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ TransactionService –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            await self._update_photo_receipt(
                photo_receipt,
                items_count=len(items),
                total_amount=total_amount,
                status='success'
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success_text = t.get_text('receipt_processed', language, len(items))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–º–º–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if total_amount > 0:
                success_text += f"\nüí∞ {t.get_text('balance_title', language)}: {total_amount} {currency}"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=success_text
            )
            
            # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ–º–Ω–æ–≥–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
            if len(items) <= 10 and items:
                items_text = "\n\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
                for i, item in enumerate(items[:10], 1):
                    item_name = item.get('name', '–¢–æ–≤–∞—Ä')
                    item_price = item.get('price', 0)
                    items_text += f"{i}. {item_name} - {item_price} {currency}\n"
                
                await self.telegram_api.send_message(
                    chat_id=chat_id,
                    text=items_text
                )
            
            logger.info(f"Receipt processed for user {chat_id}: {len(items)} items, {total_amount} {currency}")
            
        except Exception as e:
            logger.error(f"Error creating transactions from receipt: {e}")
            await self._handle_photo_error(chat_id, photo_receipt, language, str(e))
    
    async def _handle_unrecognized_receipt(self, chat_id: int, text: str, language: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞"""
        # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ —á–µ–∫, –∞ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        if len(text) > 10:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç
            message = f"üìÑ {t.get_text('photo_text_extracted', language, text[:200])}..."
            if len(text) > 200:
                message += f"\n\n{t.get_text('processing_failed', language)}"
            
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=message
            )
        else:
            # –°–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
            error_text = t.get_text('photo_error', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=error_text
            )
    
    async def _handle_photo_error(
        self, 
        chat_id: int, 
        photo_receipt: PhotoReceipt, 
        language: str, 
        error_message: str
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —Ñ–æ—Ç–æ"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –æ—à–∏–±–∫–æ–π
        await self._update_photo_receipt(
            photo_receipt,
            status='failed',
            error_message=error_message
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await self._send_photo_error(chat_id, language)
    
    async def _send_photo_error(self, chat_id: int, language: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ"""
        try:
            error_text = t.get_text('photo_error', language)
            await self.telegram_api.send_message(
                chat_id=chat_id,
                text=error_text
            )
        except Exception as e:
            logger.error(f"Failed to send photo error message: {e}") 