"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram Bot (v13 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI OCR –º–æ–¥—É–ª–µ–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–æ–≤
"""

import logging
import os
import tempfile
from typing import Dict, Any

from telegram import Update
from telegram.ext import CallbackContext

from apps.users.models import User
from apps.ai.services.ocr.tesseract_service import TesseractOCRService
from apps.transactions.services.transaction_service import TransactionService
from apps.categories.models import Category


logger = logging.getLogger(__name__)


class PhotoMessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram (v13)"""
    
    def __init__(self):
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        self.ocr_available = False
        self.transaction_service = None
        
        try:
            self.ocr_service = TesseractOCRService()
            self.transaction_service = TransactionService()
            self.ocr_available = True
        except Exception as e:
            logger.warning(f"OCR —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    def handle_photo_message(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ–∫–∞)
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = update.effective_user
            user = self._get_or_create_user(telegram_user)
            
            if not user:
                update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OCR
            if not self.ocr_available:
                update.message.reply_text(
                    "üì∏ –§—É–Ω–∫—Ü–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
                    "üé§ –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n"
                    "\"–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ –ø–æ–∫—É–ø–∫–∏ 50000 —Å—É–º\""
                )
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = update.message.reply_text(
                "üì∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ —á–µ–∫–∞...\nüîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç –∏ —Ç–æ–≤–∞—Ä—ã..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            photo = update.message.photo[-1]
            photo_file = photo.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Ñ–æ—Ç–æ
            with tempfile.NamedTemporaryFile(suffix='.jpg', delete=False) as temp_file:
                temp_path = temp_file.name
                photo_file.download(temp_path)
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ —á–µ—Ä–µ–∑ OCR (–∏–º–∏—Ç–∞—Ü–∏—è)
                result = self._process_receipt_mock(temp_path, user)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self._send_receipt_result(update, result, processing_message)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            try:
                update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception:
                pass
    
    def _get_or_create_user(self, telegram_user) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = User.objects.filter(telegram_id=telegram_user.id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.objects.create(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username or f"user_{telegram_user.id}",
                    first_name=telegram_user.first_name or "",
                    last_name=telegram_user.last_name or "",
                    is_active=True
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.telegram_id})")
            
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def _process_receipt_mock(self, image_path: str, user: User) -> Dict[str, Any]:
        """
        –ò–º–∏—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ–∫–∞ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏)
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞
        """
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ–∫–∞
            return {
                'success': True,
                'shop_name': 'Korzinka.uz',
                'total_amount': 127500,
                'items_count': 5,
                'receipt_number': '–ê001234567',
                'receipt_date': '2024-01-15 14:30',
                'items': [
                    {'name': '–•–ª–µ–± –±–µ–ª—ã–π', 'price': 4500, 'quantity': 2},
                    {'name': '–ú–æ–ª–æ–∫–æ 1–ª', 'price': 8500, 'quantity': 1},
                    {'name': '–Ø–π—Ü–∞ 10—à—Ç', 'price': 15000, 'quantity': 1},
                    {'name': '–ü–æ–º–∏–¥–æ—Ä—ã 1–∫–≥', 'price': 12000, 'quantity': 1},
                    {'name': '–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å 2–∫–≥', 'price': 16000, 'quantity': 1}
                ]
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    def _send_receipt_result(self, update: Update, result: Dict[str, Any],
                           processing_message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ–∫–∞
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            if result.get('success'):
                # –£—Å–ø–µ—à–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                message = f"‚úÖ **–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!** (–¥–µ–º–æ-—Ä–µ–∂–∏–º)\n\n"
                message += f"üè™ **–ú–∞–≥–∞–∑–∏–Ω:** {result.get('shop_name', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
                message += f"üìÖ **–î–∞—Ç–∞:** {result.get('receipt_date', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞')}\n"
                message += f"üßæ **–ù–æ–º–µ—Ä —á–µ–∫–∞:** {result.get('receipt_number', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}\n"
                message += f"üí∞ **–û–±—â–∞—è —Å—É–º–º–∞:** {result.get('total_amount', 0):,.0f} —Å—É–º\n"
                message += f"üì¶ **–¢–æ–≤–∞—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:** {result.get('items_count', 0)}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
                items = result.get('items', [])
                if items:
                    message += "üìù **–¢–æ–≤–∞—Ä—ã:**\n"
                    for item in items[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                        message += f"‚Ä¢ {item['name']} ‚Äî {item['price']:,.0f} —Å—É–º\n"
                    
                    if len(items) > 5:
                        message += f"... –∏ –µ—â–µ {len(items) - 5} —Ç–æ–≤–∞—Ä–æ–≤\n"
                
                message += "\nüí∏ **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏**"
                message += "\n\nüì± *–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ–∫–æ–≤*"
                
                processing_message.edit_text(message, parse_mode='Markdown')
                
            else:
                # –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                error_message = result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                message = f"‚ùå **–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞**\n\n"
                message += f"–ü—Ä–∏—á–∏–Ω–∞: {error_message}\n\n"
                message += "üí° **–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                message += "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                message += "‚Ä¢ –î–µ—Ä–∂–∞—Ç—å –∫–∞–º–µ—Ä—É —Ä–æ–≤–Ω–æ\n"
                message += "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ —Ç–µ–∫—Å—Ç —á–µ—Ç–∫–æ –≤–∏–¥–µ–Ω\n\n"
                message += "üé§ **–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n"
                message += "\"–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ –ø–æ–∫—É–ø–∫–∏ [—Å—É–º–º–∞] —Å—É–º\""
                
                processing_message.edit_text(message, parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ–∫–∞: {e}")
            try:
                processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            except Exception:
                pass


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
photo_handler = PhotoMessageHandler() 