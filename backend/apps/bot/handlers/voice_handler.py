"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –±–æ—Ç–µ
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Whisper AI –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
"""

import logging
import tempfile
import os
from typing import Dict, Any, Optional
from datetime import timedelta

from telegram import Update
from telegram.ext import CallbackContext
from django.core.files.uploadedfile import InMemoryUploadedFile

from apps.users.models import User
from apps.ai.services.voice.whisper_service import WhisperVoiceService
from apps.ai.services.nlp.receipt_matcher import ReceiptVoiceMatcher
from apps.ai.models import VoiceResult, OCRResult, ReceiptVoiceMatch
from apps.bot.services.voice_command_processor import VoiceCommandProcessor
from apps.transactions.services.transaction_service import TransactionService


logger = logging.getLogger(__name__)


class VoiceMessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    
    def __init__(self):
        self.whisper_service = WhisperVoiceService()
        self.voice_processor = VoiceCommandProcessor()
        self.receipt_matcher = ReceiptVoiceMatcher()
        self.transaction_service = TransactionService()
    
    async def handle_voice_message(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = update.effective_user
            user = await self._get_or_create_user(telegram_user)
            
            if not user:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = await update.message.reply_text(
                "üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...\nüîä –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice = update.message.voice
            voice_file = await voice.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_path = temp_file.name
                await voice_file.download_to_drive(temp_path)
            
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_result = await self._process_voice_recognition(
                    temp_path, user, processing_message
                )
                
                if not voice_result or voice_result.status == 'failed':
                    await processing_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {voice_result.error_message if voice_result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}\n\n"
                        "üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                        "‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç—å —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ\n"
                        "‚Ä¢ –ó–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏—Ö–æ–º –º–µ—Å—Ç–µ\n"
                        "‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏"
                    )
                    return
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                command_result = await self._process_voice_command(
                    voice_result, user, processing_message
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self._send_voice_result(
                    update, voice_result, command_result, processing_message
                )
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —á–µ–∫–∞–º–∏
                await self._try_auto_match_with_receipts(update, voice_result, user)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            try:
                await update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception:
                pass
    
    async def _get_or_create_user(self, telegram_user) -> Optional[User]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = User.objects.filter(telegram_id=telegram_user.id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.objects.create(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username or f"user_{telegram_user.id}",
                    first_name=telegram_user.first_name or "",
                    last_name=telegram_user.last_name or "",
                    is_active=True
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.telegram_id})")
            
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    async def _process_voice_recognition(
        self, 
        audio_path: str, 
        user: User, 
        processing_message
    ) -> Optional[VoiceResult]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Whisper AI
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ —Ñ–∞–π–ª—É
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            VoiceResult: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        """
        try:
            # –°–æ–∑–¥–∞–µ–º Django UploadedFile –æ–±—ä–µ–∫—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with open(audio_path, 'rb') as f:
                file_data = f.read()
                
            # –°–æ–∑–¥–∞–µ–º InMemoryUploadedFile –¥–ª—è Whisper —Å–µ—Ä–≤–∏—Å–∞
            uploaded_file = InMemoryUploadedFile(
                file=None,
                field_name='audio',
                name='voice_message.ogg',
                content_type='audio/ogg',
                size=len(file_data),
                charset=None
            )
            uploaded_file._file = tempfile.BytesIO(file_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await processing_message.edit_text(
                "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ\nü§ñ –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å —Å –ø–æ–º–æ—â—å—é Whisper AI..."
            )
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π)
            user_language = getattr(user, 'language', 'ru')
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
            voice_result = self.whisper_service.recognize_voice(
                user=user,
                audio_file=uploaded_file,
                language=user_language,
                task='transcribe'
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            detected_lang_emoji = {
                'ru': 'üá∑üá∫',
                'uz': 'üá∫üáø', 
                'en': 'üá∫üá∏'
            }.get(voice_result.detected_language, 'üåç')
            
            await processing_message.edit_text(
                f"‚úÖ –†–µ—á—å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ {detected_lang_emoji}\n"
                f"üìù –¢–µ–∫—Å—Ç: _{voice_result.recognized_text[:50]}..._\n"
                f"üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {voice_result.confidence_score * 100:.0f}%\n"
                "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–æ–º–∞–Ω–¥—É..."
            )
            
            return voice_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞: {e}")
            return None
    
    async def _process_voice_command(
        self, 
        voice_result: VoiceResult, 
        user: User,
        processing_message
    ) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–∑ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            voice_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ VoiceCommandProcessor
            command_result = self.voice_processor.process_voice_command(
                text=voice_result.recognized_text,
                user=user,
                language=voice_result.detected_language or 'ru'
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥—ã –≤ VoiceResult
            if command_result and voice_result.command:
                voice_result.command.execution_status = command_result.get('status', 'completed')
                voice_result.command.execution_result = command_result.get('data', {})
                voice_result.command.execution_error = command_result.get('error', '')
                voice_result.command.save()
            
            return command_result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                'status': 'error',
                'error': str(e),
                'message': '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã'
            }
    
    async def _send_voice_result(
        self, 
        update: Update, 
        voice_result: VoiceResult,
        command_result: Optional[Dict[str, Any]], 
        processing_message
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            voice_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            command_result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji –¥–ª—è —è–∑—ã–∫–∞
            lang_emoji = {
                'ru': 'üá∑üá∫',
                'uz': 'üá∫üáø',
                'en': 'üá∫üá∏'
            }.get(voice_result.detected_language, 'üåç')
            
            message_lines = [
                f"‚úÖ **–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ** {lang_emoji}\n"
            ]
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            message_lines.append(f"üìù **–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:**")
            message_lines.append(f"_{voice_result.recognized_text}_\n")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            confidence_emoji = "üü¢" if voice_result.confidence_score > 0.8 else "üü°" if voice_result.confidence_score > 0.5 else "üî¥"
            message_lines.append(f"{confidence_emoji} **–¢–æ—á–Ω–æ—Å—Ç—å:** {voice_result.confidence_score * 100:.0f}%")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            if command_result:
                status = command_result.get('status', 'unknown')
                
                if status == 'success':
                    message_lines.append(f"\n‚úÖ **–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:**")
                    message_lines.append(command_result.get('message', '–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞'))
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if 'data' in command_result:
                        data = command_result['data']
                        if isinstance(data, dict):
                            if 'transaction' in data:
                                trans = data['transaction']
                                message_lines.append(f"üí∞ –°—É–º–º–∞: {trans.get('amount', 0):,.0f} —Å—É–º")
                                message_lines.append(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {trans.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
                
                elif status == 'error':
                    message_lines.append(f"\n‚ùå **–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**")
                    message_lines.append(command_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                
                elif status == 'no_command':
                    message_lines.append(f"\nüí¨ **–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞**")
                    message_lines.append("–≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ –∫–æ–º–∞–Ω–¥–∞")
                    
                else:
                    message_lines.append(f"\n‚ö†Ô∏è **–°—Ç–∞—Ç—É—Å:** {status}")
                    if 'message' in command_result:
                        message_lines.append(command_result['message'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–≥–º–µ–Ω—Ç–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if hasattr(voice_result, 'segments_count') and voice_result.segments_count > 1:
                message_lines.append(f"\nüìä **–°–µ–≥–º–µ–Ω—Ç–æ–≤ —Ä–µ—á–∏:** {voice_result.segments_count}")
            
            final_message = "\n".join(message_lines)
            
            await processing_message.edit_text(
                final_message,
                parse_mode='Markdown'
            )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            try:
                await processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            except Exception:
                pass
    
    async def _try_auto_match_with_receipts(
        self, 
        update: Update, 
        voice_result: VoiceResult, 
        user: User
    ) -> None:
        """
        –ü—ã—Ç–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ —á–µ–∫–∞–º–∏
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            voice_result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        """
        try:
            # –ò—â–µ–º –Ω–µ–¥–∞–≤–Ω–∏–µ —á–µ–∫–∏ (–≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç)
            recent_ocr_results = OCRResult.objects.filter(
                user=user,
                status='completed',
                created_at__gte=voice_result.created_at - timedelta(minutes=5)
            ).order_by('-created_at')[:3]
            
            if not recent_ocr_results.exists():
                return
            
            best_match = None
            best_confidence = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–µ–∫ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            for ocr_result in recent_ocr_results:
                try:
                    match = self.receipt_matcher.match_voice_with_receipt(
                        voice_result, ocr_result
                    )
                    
                    if match and match.confidence_score > best_confidence and match.confidence_score > 0.6:
                        best_confidence = match.confidence_score
                        best_match = match
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å —á–µ–∫–æ–º {ocr_result.id}: {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ä–æ—à–µ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if best_match and best_match.confidence_score > 0.7:
                await self._send_auto_match_notification(update, best_match)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    async def _send_auto_match_notification(
        self, 
        update: Update, 
        match: ReceiptVoiceMatch
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            match: –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        """
        try:
            message = "üéØ **–ù–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å —á–µ–∫–æ–º!**\n\n"
            message += f"üßæ **–ß–µ–∫:** {match.ocr_result.shop_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω'}\n"
            message += f"üí∞ **–°—É–º–º–∞ —á–µ–∫–∞:** {match.total_amount_receipt:,.0f} —Å—É–º\n"
            
            if match.total_amount_voice > 0:
                message += f"üé§ **–°—É–º–º–∞ –∏–∑ –≥–æ–ª–æ—Å–∞:** {match.total_amount_voice:,.0f} —Å—É–º\n"
            
            message += f"üéØ **–¢–æ—á–Ω–æ—Å—Ç—å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è:** {match.confidence_score * 100:.0f}%\n"
            
            if match.matched_items_count > 0:
                message += f"üõçÔ∏è **–°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤:** {match.matched_items_count}\n"
            
            if match.amount_match_percentage > 80:
                message += f"üíØ **–°—É–º–º—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç:** {match.amount_match_percentage:.0f}%\n"
            
            message += f"‚è∞ **–†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏:** {match.time_difference_minutes} –º–∏–Ω\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
            if match.matched_items and len(match.matched_items) > 0:
                message += "üõçÔ∏è **–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n"
                for item in match.matched_items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    voice_item = item.get('voice_item', {})
                    receipt_item = item.get('receipt_item', {})
                    similarity = item.get('similarity', 0) * 100
                    
                    message += f"‚Ä¢ {voice_item.get('name', 'N/A')} ‚Üî {receipt_item.get('name', 'N/A')} ({similarity:.0f}%)\n"
                
                if len(match.matched_items) > 3:
                    message += f"... –∏ –µ—â–µ {len(match.matched_items) - 3} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π"
            
            await update.message.reply_text(
                message,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏: {e}")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
voice_handler = VoiceMessageHandler() 