"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram Bot (v13 —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –º–æ–¥—É–ª–µ–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
"""

import logging
import os
import tempfile
from typing import Dict, Any

from telegram import Update
from telegram.ext import CallbackContext

from apps.users.models import User
from apps.ai.services.voice.whisper_service import WhisperVoiceService
from apps.ai.services.nlp.command_processor import VoiceCommandProcessor
from apps.ai.models import VoiceResult, VoiceCommand


logger = logging.getLogger(__name__)


class VoiceMessageHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram (v13)"""
    
    def __init__(self):
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ Whisper
        self.whisper_available = False
        logger.info("Voice handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    
    def handle_voice_message(self, update: Update, context: CallbackContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            context: Telegram Context –æ–±—ä–µ–∫—Ç
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_user = update.effective_user
            user = self._get_or_create_user(telegram_user)
            
            if not user:
                update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            processing_message = update.message.reply_text("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            voice_file = update.message.voice.get_file()
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∞—É–¥–∏–æ
            with tempfile.NamedTemporaryFile(suffix='.ogg', delete=False) as temp_file:
                temp_path = temp_file.name
                voice_file.download(temp_path)
            
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
                recognition_result = self._recognize_speech(temp_path, user)
                
                if not recognition_result['success']:
                    processing_message.edit_text(
                        f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {recognition_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )
                    return
                
                recognized_text = recognition_result['text']
                language = recognition_result['language']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                processing_message.edit_text(
                    f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{recognized_text}\"\nüîÑ –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É..."
                )
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
                command_result = self._process_voice_command(
                    recognized_text, language, user
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                self._send_command_result(update, command_result, processing_message)
                
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_path):
                    os.unlink(temp_path)
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            try:
                update.message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception:
                pass
    
    def _get_or_create_user(self, telegram_user) -> User:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
            user = User.objects.filter(telegram_id=telegram_user.id).first()
            
            if not user:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = User.objects.create(
                    telegram_id=telegram_user.id,
                    username=telegram_user.username or f"user_{telegram_user.id}",
                    first_name=telegram_user.first_name or "",
                    last_name=telegram_user.last_name or "",
                    is_active=True
                )
                logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username} (ID: {user.telegram_id})")
            
            return user
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return None
    
    def _recognize_speech(self, audio_path: str, user: User) -> Dict[str, Any]:
        """
        –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        """
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π Whisper
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏
            file_size = os.path.getsize(audio_path)
            
            if file_size < 1000:  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª
                return {
                    'success': False,
                    'error': '–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ'
                }
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
            mock_texts = [
                "–ü–æ–∫–∞–∂–∏ –º–æ–π –±–∞–ª–∞–Ω—Å",
                "–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ —Ö–ª–µ–± –ø—è—Ç—å —Ç—ã—Å—è—á —Å—É–º",
                "–°–æ–∑–¥–∞–π —Ü–µ–ª—å –Ω–∞–∫–æ–ø–∏—Ç—å –º–∏–ª–ª–∏–æ–Ω –Ω–∞ –º–∞—à–∏–Ω—É",
                "–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü"
            ]
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            text_index = (file_size // 1000) % len(mock_texts)
            recognized_text = mock_texts[text_index]
            
            logger.info(f"–ì–æ–ª–æ—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω (–¥–µ–º–æ): {recognized_text}")
            
            return {
                'success': True,
                'text': recognized_text,
                'language': 'ru'
            }
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return {
                'success': False,
                'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {str(e)}'
            }
    
    def _process_voice_command(self, text: str, language: str, user: User) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
        
        Args:
            text: –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            language: –Ø–∑—ã–∫
            user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            
        Returns:
            Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–æ–º–∞–Ω–¥
            command_processor = VoiceCommandProcessor(user)
            
            # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
            parsed_command = command_processor.parse_command(text, language, user)
            
            if not parsed_command:
                return {
                    'success': False,
                    'message': '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.',
                    'suggestions': self._get_command_suggestions(language)
                }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è v13)
            result = {
                'success': True,
                'message': f'–ö–æ–º–∞–Ω–¥–∞ "{parsed_command["type"]}" –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                'data': parsed_command.get('params', {})
            }
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
            return {
                'success': False,
                'message': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}'
            }
    
    def _send_command_result(self, update: Update, result: Dict[str, Any], 
                           processing_message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            update: Telegram Update –æ–±—ä–µ–∫—Ç
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
            processing_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            if result.get('success'):
                # –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                message = f"‚úÖ {result.get('message', '–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                data = result.get('data', {})
                if data:
                    message += self._format_command_data(data)
                
                processing_message.edit_text(message)
                
            else:
                # –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                error_message = result.get('message') or result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                message = f"‚ùå {error_message}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
                suggestions = result.get('suggestions', [])
                if suggestions:
                    message += "\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n" + "\n".join(f"‚Ä¢ {s}" for s in suggestions[:3])
                
                processing_message.edit_text(message)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            try:
                processing_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
            except Exception:
                pass
    
    def _format_command_data(self, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not data:
            return ""
        
        formatted = "\n\nüìä **–î–µ—Ç–∞–ª–∏:**\n"
        for key, value in data.items():
            if key in ['amount', '—Å—É–º–º–∞']:
                formatted += f"üí∞ –°—É–º–º–∞: {value}\n"
            elif key in ['category', '–∫–∞—Ç–µ–≥–æ—Ä–∏—è']:
                formatted += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {value}\n"
            elif key in ['description', '–æ–ø–∏—Å–∞–Ω–∏–µ']:
                formatted += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {value}\n"
            else:
                formatted += f"‚Ä¢ {key}: {value}\n"
        
        return formatted
    
    def _get_command_suggestions(self, language: str) -> list:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥"""
        if language == 'ru':
            return [
                "–ü–æ–∫–∞–∂–∏ –º–æ–π –±–∞–ª–∞–Ω—Å",
                "–î–æ–±–∞–≤—å —Ä–∞—Å—Ö–æ–¥ —Ö–ª–µ–± 5000 —Å—É–º",
                "–ü–æ–∫–∞–∂–∏ –º–æ–∏ —Ü–µ–ª–∏"
            ]
        elif language == 'uz':
            return [
                "Balansimni ko'rsat",
                "Xarajat qo'sh non 5000 so'm",
                "Maqsadlarimni ko'rsat"
            ]
        else:
            return [
                "Show my balance",
                "Add expense bread 5000",
                "Show my goals"
            ]


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
voice_handler = VoiceMessageHandler() 