#!/usr/bin/env python
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
"""
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BASE_URL = 'http://localhost:8000'
TEST_TELEGRAM_CHAT_ID = 123456789
TEST_PHONE_NUMBER = '+998901234567'

def test_telegram_auth():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ Telegram ID"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    # URL –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_url = f"{BASE_URL}/api/users/auth/telegram-login/"
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    auth_data = {
        'telegram_chat_id': TEST_TELEGRAM_CHAT_ID,
        'phone_number': TEST_PHONE_NUMBER
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(auth_url, json=auth_data)
        
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: POST {auth_url}")
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ: {json.dumps(auth_data, indent=2)}")
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"üîë Access Token: {data.get('access', '')[:50]}...")
            print(f"üîÑ Refresh Token: {data.get('refresh', '')[:50]}...")
            print(f"üë§ User ID: {data.get('user_id')}")
            print(f"üì± Phone: {data.get('phone_number')}")
            print(f"üÜï New User: {data.get('is_new_user')}")
            
            return data.get('access')
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            return None
            
    except requests.exceptions.ConnectionError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python manage.py runserver")
        return None
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None

def test_api_with_token(access_token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∑–∞–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º"""
    if not access_token:
        return
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Å —Ç–æ–∫–µ–Ω–æ–º...")
    
    # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users_url = f"{BASE_URL}/api/users/api/users/"
    
    headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json'
    }
    
    try:
        response = requests.get(users_url, headers=headers)
        
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: GET {users_url}")
        print(f"üîí Authorization: Bearer {access_token[:20]}...")
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –î–∞–Ω–Ω—ã–µ: {json.dumps(data, indent=2, ensure_ascii=False)}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞: {e}")

def test_webhook_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook endpoint"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Webhook endpoint...")
    
    webhook_url = f"{BASE_URL}/telegram/webhook/"
    
    # –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram
    test_update = {
        "update_id": 123456789,
        "message": {
            "message_id": 123,
            "from": {
                "id": TEST_TELEGRAM_CHAT_ID,
                "is_bot": False,
                "first_name": "Test",
                "username": "test_user"
            },
            "chat": {
                "id": TEST_TELEGRAM_CHAT_ID,
                "first_name": "Test",
                "username": "test_user",
                "type": "private"
            },
            "date": 1640995200,
            "text": "/start"
        }
    }
    
    try:
        response = requests.post(webhook_url, json=test_update)
        
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: POST {webhook_url}")
        print(f"üì¶ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        
        if response.status_code == 200:
            print("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ webhook!")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook –∑–∞–ø—Ä–æ—Å–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Telegram Bot API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    access_token = test_telegram_auth()
    
    # –¢–µ—Å—Ç 2: API —Å —Ç–æ–∫–µ–Ω–æ–º
    test_api_with_token(access_token)
    
    # –¢–µ—Å—Ç 3: Webhook
    test_webhook_endpoint()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã") 