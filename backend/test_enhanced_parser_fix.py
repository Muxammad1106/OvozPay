#!/usr/bin/env python
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º —á–∏—Å–µ–ª —Å–ª–æ–≤–∞–º–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
"""

import os
import sys
import asyncio
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.insert(0, '/Users/muxammadchariev/Desktop/OvozPay/backend')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from apps.bot.services.text_parser_service import TextParserService


async def test_word_numbers_with_currency():
    """–¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–∏—Å–µ–ª —Å–ª–æ–≤–∞–º–∏ —Å –≤–∞–ª—é—Ç–æ–π"""
    parser = TextParserService()
    
    test_cases = [
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
        "–ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É —Ç—ã—Å—è—á—É –¥–æ–ª–ª–∞—Ä–æ–≤",
        "–ø–æ–ª—É—á–∏–ª –æ–¥–Ω—É —Ç—ã—Å—è—á—É –¥–æ–ª–ª–∞—Ä–æ–≤", 
        "–ø–æ–ª—É—á–∏–ª –∑–∞—Ä–ø–ª–∞—Ç—É –æ–¥–Ω–∞ —Ç—ã—Å—è—á–∞ –¥–æ–ª–ª–∞—Ä–æ–≤",
        "–ø–æ–ª—É—á–∏–ª —Ç—ã—Å—è—á–∞ –¥–æ–ª–ª–∞—Ä–æ–≤",
        
        # –î—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã
        "–ø–æ—Ç—Ä–∞—Ç–∏–ª —Ç—ã—Å—è—á—É —Å—É–º –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–ø–æ–ª—É—á–∏–ª –¥–≤–µ —Ç—ã—Å—è—á–∏ —Ä—É–±–ª–µ–π",
        "–ø–æ—Ç—Ä–∞—Ç–∏–ª –ø—è—Ç—å—Å–æ—Ç –µ–≤—Ä–æ",
        
        # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∏—Å–ª–∞
        "–ø–æ–ª—É—á–∏–ª –ø—è—Ç—å —Ç—ã—Å—è—á –¥–æ–ª–ª–∞—Ä–æ–≤",
        "–ø–æ—Ç—Ä–∞—Ç–∏–ª —Ç—Ä–∏ —Ç—ã—Å—è—á–∏ —Å—É–º",
        "–ø–æ–ª—É—á–∏–ª –¥–µ—Å—è—Ç—å —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π",
        
        # –ú–µ–Ω—å—à–∏–µ —Å—É–º–º—ã
        "–ø–æ—Ç—Ä–∞—Ç–∏–ª —Å—Ç–æ –¥–æ–ª–ª–∞—Ä–æ–≤",
        "–ø–æ–ª—É—á–∏–ª –¥–≤–µ—Å—Ç–∏ —Å—É–º",
        "–ø–æ—Ç—Ä–∞—Ç–∏–ª –ø—è—Ç—å–¥–µ—Å—è—Ç —Ä—É–±–ª–µ–π",
    ]
    
    print("=== –¢–ï–°–¢ –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–Ø –ß–ò–°–ï–õ –°–õ–û–í–ê–ú–ò ===\n")
    
    success_count = 0
    total_count = len(test_cases)
    
    for i, test_text in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_text}")
        
        try:
            # –ü–∞—Ä—Å–∏–º —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ UZS
            result = await parser.parse_transaction_text(test_text, 'ru', 'UZS')
            
            if result:
                original_amount = result.get('original_amount', result['amount'])
                original_currency = result.get('original_currency', result['currency'])
                final_amount = result['amount']
                final_currency = result['currency']
                
                print(f"  ‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {result['type']}")
                print(f"     –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞: {original_amount} {original_currency}")
                print(f"     –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {final_amount} {final_currency}")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {result['category']}")
                print(f"     –û–ø–∏—Å–∞–Ω–∏–µ: {result['description']}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
                if "—Ç—ã—Å—è—á" in test_text.lower() and float(result['amount']) >= 1000:
                    success_count += 1
                    print("     ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                elif "—Å—Ç–æ" in test_text.lower() and float(result['amount']) >= 100:
                    success_count += 1
                    print("     ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                elif "–ø—è—Ç—å–¥–µ—Å—è—Ç" in test_text.lower() and float(result['amount']) >= 50:
                    success_count += 1
                    print("     ‚úÖ –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    print("     ‚ö†Ô∏è –°—É–º–º–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    accuracy = (success_count / total_count) * 100
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {success_count}/{total_count} ({accuracy:.1f}%) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    
    return accuracy >= 80


async def test_currency_conversion():
    """–¢–µ—Å—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∞–ª—é—Ç"""
    parser = TextParserService()
    
    print("=== –¢–ï–°–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò –í–ê–õ–Æ–¢ ===\n")
    
    test_cases = [
        # –î–æ–ª–ª–∞—Ä—ã –≤ —Å—É–º—ã
        ("–ø–æ—Ç—Ä–∞—Ç–∏–ª 100 –¥–æ–ª–ª–∞—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç—ã", 'UZS', 100 * 12300),
        # –ï–≤—Ä–æ –≤ –¥–æ–ª–ª–∞—Ä—ã
        ("–ø–æ–ª—É—á–∏–ª 50 –µ–≤—Ä–æ", 'USD', 50 * 1.09),
        # –†—É–±–ª–∏ –≤ —Å—É–º—ã
        ("–ø–æ—Ç—Ä–∞—Ç–∏–ª 1000 —Ä—É–±–ª–µ–π", 'UZS', 1000 * 135),
        # –ë–µ–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        ("–ø–æ—Ç—Ä–∞—Ç–∏–ª 50000 —Å—É–º", 'UZS', 50000),
    ]
    
    success_count = 0
    
    for i, (test_text, user_currency, expected_amount) in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_text} ‚Üí {user_currency}")
        
        try:
            result = await parser.parse_transaction_text(test_text, 'ru', user_currency)
            
            if result:
                final_amount = float(result['amount'])
                original_amount = result.get('original_amount', result['amount'])
                original_currency = result.get('original_currency', result['currency'])
                
                print(f"  –ò—Å—Ö–æ–¥–Ω–æ: {original_amount} {original_currency}")
                print(f"  –†–µ–∑—É–ª—å—Ç–∞—Ç: {final_amount} {result['currency']}")
                print(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: ~{expected_amount} {user_currency}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ (¬±5%)
                if abs(final_amount - expected_amount) / expected_amount <= 0.05:
                    success_count += 1
                    print("  ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                else:
                    print("  ‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ—Ç–æ—á–Ω–∞—è")
            else:
                print("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    accuracy = (success_count / len(test_cases)) * 100
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò: {success_count}/{len(test_cases)} ({accuracy:.1f}%) —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    return accuracy >= 75


async def test_no_category_duplication():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("=== –¢–ï–°–¢ –ü–†–ï–î–û–¢–í–†–ê–©–ï–ù–ò–Ø –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–ô ===\n")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è
    test_cases = [
        "—Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "—Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", 
        "—Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¢–†–ê–ù–°–ü–û–†–¢",
        "—Å–æ–∑–¥–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ",  # —Å –ø—Ä–æ–±–µ–ª–æ–º
    ]
    
    parser = TextParserService()
    
    categories_created = []
    
    for i, test_text in enumerate(test_cases, 1):
        print(f"–¢–µ—Å—Ç {i}: {test_text}")
        
        try:
            result = parser.parse_management_command(test_text, 'ru')
            
            if result and result['type'] == 'create_category':
                category_name = result['category_name']
                print(f"  ‚úÖ –ö–æ–º–∞–Ω–¥–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category_name}'")
                categories_created.append(category_name.lower().strip())
            else:
                print("  ‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
    unique_categories = set(categories_created)
    print(f"–í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {len(categories_created)}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(unique_categories)}")
    
    if len(unique_categories) == 1 and len(categories_created) > 0:
        print("‚úÖ –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–æ - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞—é—Ç –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        return True
    else:
        print("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ï–†–ê\n")
    
    # –¢–µ—Å—Ç 1: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å–ª–æ–≤–∞–º–∏
    test1_passed = await test_word_numbers_with_currency()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
    test2_passed = await test_currency_conversion()
    
    print("\n" + "="*50 + "\n")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    test3_passed = await test_no_category_duplication()
    
    print("\n" + "="*50)
    print("üèÅ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å–ª–æ–≤–∞–º–∏: {'–ü–†–û–®–ï–õ' if test1_passed else '–ù–ï –ü–†–û–®–ï–õ'}")
    print(f"‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç: {'–ü–†–û–®–ï–õ' if test2_passed else '–ù–ï –ü–†–û–®–ï–õ'}")
    print(f"‚úÖ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è: {'–ü–†–û–®–ï–õ' if test3_passed else '–ù–ï –ü–†–û–®–ï–õ'}")
    
    all_passed = test1_passed and test2_passed and test3_passed
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {'–í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò' if all_passed else '–ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´'}")
    
    if all_passed:
        print("üéâ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é —Å –Ω–æ–≤—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏!")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")


if __name__ == '__main__':
    asyncio.run(main()) 